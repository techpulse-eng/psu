{"version":3,"file":"Components_dynamic_jsx.xxxxxxxxxxxxxxxxxxxx.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA,IAAMK,SAAS,GAAG,UAACC,KAAD,EAAW;AACzB,kBAAkCJ,+CAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOK,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA8BN,+CAAQ,CAACI,KAAK,CAACG,gBAAN,IAA0B,IAA3B,CAAtC;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,QAAQ,GAAG,YAAM;AACnBD,IAAAA,UAAU,CAACL,KAAK,CAACG,gBAAN,IAA0B,IAA3B,CAAV;AACAH,IAAAA,KAAK,CAACO,GAAN,CAAUP,KAAK,CAACQ,EAAhB,EAAoBC,IAApB,CAAyB,UAAAC,CAAC,EAAI;AAE1B,UAAIC,KAAK,CAACC,OAAN,CAAcF,CAAd,CAAJ,EAAsB;AAClBA,QAAAA,CAAC,CAACG,OAAF,CAAU,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACC,SAAF,GAAcf,KAAK,CAACe,SAAxB;AAAA,SAAX;AACH;;AAEDb,MAAAA,YAAY,CAACQ,CAAD,CAAZ;AACAL,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KARD;AASH,GAXD;;AAiBAV,EAAAA,gDAAS,CAAC,YAAM;AACZW,IAAAA,QAAQ;AAER,WAAO,YAAM,CAAG,CAAhB;AACH,GAJQ,EAIN,CAACN,KAAK,CAACe,SAAP,CAJM,CAAT;;AAMA,MAAIX,OAAJ,EAAa;AACT,WAAOJ,KAAK,CAACgB,MAAN,CAAahB,KAAK,CAACG,gBAAnB,CAAP;AACH;;AAED,SAAO,CACHH,KAAK,CAACgB,MAAN,CAAaf,SAAb,CADG,eAEH,iDAAC,uDAAD;AAAe,WAAO,EAAED,KAAK,CAACiB,WAA9B;AAA2C,WAAO,EAAEjB,KAAK,CAACkB,mBAAN,GAA4B,IAAhF;AAAsF,YAAQ,EAhBlF,SAAVC,OAAU,GAAM;AAClBnB,MAAAA,KAAK,CAACoB,QAAN,CAAe;AAAEL,QAAAA,SAAS,EAAEM,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAlC,EAAqC,CAArC;AAAb,OAAf;AACH,KAcG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFG,CAAP;AAIH,CAnCD;;AAqCA,iEAAe3B,0EAAqB,CAACE,SAAD,CAApC","sources":["webpack://materialui/./Components/dynamic.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { withComponentFeatures } from 'universal-dashboard';\r\nimport ReactInterval from 'react-interval';\r\n\r\nconst UDDynamic = (props) => {\r\n    const [component, setComponent] = useState({});\r\n    const [loading, setLoading] = useState(props.loadingComponent != null);\r\n\r\n    const loadData = () => {\r\n        setLoading(props.loadingComponent != null);\r\n        props.get(props.id).then(x => {\r\n\r\n            if (Array.isArray(x)) {\r\n                x.forEach(y => y.__version = props.__version);\r\n            }\r\n\r\n            setComponent(x);\r\n            setLoading(false);\r\n        });\r\n    }\r\n\r\n    const refresh = () => {\r\n        props.setState({ __version: Math.random().toString(36).substr(2, 5) });\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n\r\n        return () => { }\r\n    }, [props.__version])\r\n\r\n    if (loading) {\r\n        return props.render(props.loadingComponent);\r\n    }\r\n\r\n    return [\r\n        props.render(component),\r\n        <ReactInterval enabled={props.autoRefresh} timeout={props.autoRefreshInterval * 1000} callback={refresh} />\r\n    ]\r\n}\r\n\r\nexport default withComponentFeatures(UDDynamic);"],"names":["React","useEffect","useState","withComponentFeatures","ReactInterval","UDDynamic","props","component","setComponent","loadingComponent","loading","setLoading","loadData","get","id","then","x","Array","isArray","forEach","y","__version","render","autoRefresh","autoRefreshInterval","refresh","setState","Math","random","toString","substr"],"sourceRoot":""}