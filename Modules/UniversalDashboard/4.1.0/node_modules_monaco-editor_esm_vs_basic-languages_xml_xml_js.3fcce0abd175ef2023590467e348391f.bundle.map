{"version":3,"file":"node_modules_monaco-editor_esm_vs_basic-languages_xml_xml_js.xxxxxxxxxxxxxxxxxxxx.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACa;AACN;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,UAAU,uBAAuB;AACjC,UAAU,yBAAyB;AACnC,UAAU,uBAAuB;AACjC;AACA;AACA,UAAU,uBAAuB;AACjC,UAAU,yBAAyB;AACnC,UAAU,uBAAuB;AACjC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wBAAwB;AACtC;AACA;AACA,sBAAsB,oBAAoB;AAC1C,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB,oBAAoB;AAC1C,sBAAsB,cAAc;AACpC;AACA,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB,oBAAoB;AAC1C,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB,oBAAoB;AAC1C,sBAAsB;AACtB;AACA;AACA,+BAA+B,0CAA0C;AACzE,mBAAmB;AACnB;AACA;AACA;AACA,wBAAwB,wCAAwC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kCAAkC;AACxD;AACA,sBAAsB,cAAc;AACpC,sBAAsB;AACtB;AACA,oBAAoB,kCAAkC;AACtD;AACA;AACA;AACA,uBAAuB,oCAAoC;AAC3D;AACA;AACA;AACA,sBAAsB,gCAAgC;AACtD;AACA;AACA;AACA,KAAK;AACL","sources":["webpack://materialui/./node_modules/monaco-editor/esm/vs/basic-languages/xml/xml.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    comments: {\n        blockComment: ['<!--', '-->'],\n    },\n    brackets: [\n        ['<', '>']\n    ],\n    autoClosingPairs: [\n        { open: '<', close: '>' },\n        { open: '\\'', close: '\\'' },\n        { open: '\"', close: '\"' },\n    ],\n    surroundingPairs: [\n        { open: '<', close: '>' },\n        { open: '\\'', close: '\\'' },\n        { open: '\"', close: '\"' },\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.xml',\n    ignoreCase: true,\n    // Useful regular expressions\n    qualifiedName: /(?:[\\w\\.\\-]+:)?[\\w\\.\\-]+/,\n    tokenizer: {\n        root: [\n            [/[^<&]+/, ''],\n            { include: '@whitespace' },\n            // Standard opening tag\n            [/(<)(@qualifiedName)/, [\n                    { token: 'delimiter' },\n                    { token: 'tag', next: '@tag' }\n                ]],\n            // Standard closing tag\n            [/(<\\/)(@qualifiedName)(\\s*)(>)/, [\n                    { token: 'delimiter' },\n                    { token: 'tag' },\n                    '',\n                    { token: 'delimiter' }\n                ]],\n            // Meta tags - instruction\n            [/(<\\?)(@qualifiedName)/, [\n                    { token: 'delimiter' },\n                    { token: 'metatag', next: '@tag' }\n                ]],\n            // Meta tags - declaration\n            [/(<\\!)(@qualifiedName)/, [\n                    { token: 'delimiter' },\n                    { token: 'metatag', next: '@tag' }\n                ]],\n            // CDATA\n            [/<\\!\\[CDATA\\[/, { token: 'delimiter.cdata', next: '@cdata' }],\n            [/&\\w+;/, 'string.escape'],\n        ],\n        cdata: [\n            [/[^\\]]+/, ''],\n            [/\\]\\]>/, { token: 'delimiter.cdata', next: '@pop' }],\n            [/\\]/, '']\n        ],\n        tag: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/(@qualifiedName)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, ['attribute.name', '', 'attribute.value']],\n            [/(@qualifiedName)(\\s*=\\s*)(\"[^\">?\\/]*|'[^'>?\\/]*)(?=[\\?\\/]\\>)/, ['attribute.name', '', 'attribute.value']],\n            [/(@qualifiedName)(\\s*=\\s*)(\"[^\">]*|'[^'>]*)/, ['attribute.name', '', 'attribute.value']],\n            [/@qualifiedName/, 'attribute.name'],\n            [/\\?>/, { token: 'delimiter', next: '@pop' }],\n            [/(\\/)(>)/, [\n                    { token: 'tag' },\n                    { token: 'delimiter', next: '@pop' }\n                ]],\n            [/>/, { token: 'delimiter', next: '@pop' }],\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/<!--/, { token: 'comment', next: '@comment' }]\n        ],\n        comment: [\n            [/[^<\\-]+/, 'comment.content'],\n            [/-->/, { token: 'comment', next: '@pop' }],\n            [/<!--/, 'comment.content.invalid'],\n            [/[<\\-]/, 'comment.content']\n        ],\n    },\n};\n"],"names":[],"sourceRoot":""}