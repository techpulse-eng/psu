{"version":3,"file":"Components_map_vector-layer_jsx.xxxxxxxxxxxxxxxxxxxx.bundle.js","mappings":";;;;;;;;;;;;;AAAO,SAASA,MAAT,CAAgBC,GAAhB,EAAqB;AACxB,MAAIA,GAAG,IAAI,IAAX,EAAiB;AAAE,WAAO,KAAP;AAAc;;AAEjC,MAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EACA;AACIA,IAAAA,GAAG,GAAGA,GAAG,CAACC,SAAJ,CAAc,CAAd,EAAiBD,GAAG,CAACE,MAAJ,GAAa,CAA9B,CAAN;AACH;;AACD,MAAIC,SAAS,GAAG,uGAAhB;AACA,MAAIA,SAAS,GAAG,4EAAhB;AACA,SAAOA,SAAS,CAACC,IAAV,CAAeJ,GAAf,CAAP;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVD;AACA;AACA;;IAEqBW;;;;;;;;;;;;;WAEjB,yBAAgBC,SAAhB,EAA2BC,KAA3B,EAAkC;AAC9B,UAAIA,KAAK,CAACC,IAAN,KAAe,eAAnB,EAAoC;AAChC,aAAKC,KAAL,CAAWC,QAAX,CAAoB,KAAKD,KAAL,CAAWE,EAA/B;AACH;AACJ;;;WAED,8BAAqB;AACjB,UAAI,CAAClB,8CAAM,CAAC,KAAKgB,KAAL,CAAWE,EAAZ,CAAX,EAA4B;AACxB,aAAKC,WAAL,GAAmBC,kBAAkB,CAACC,SAAnB,CAA6B,KAAKL,KAAL,CAAWE,EAAxC,EAA4C,KAAKI,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAA5C,CAAnB;AACH;AACJ;;;WAED,6BAAoB;AAChB,UAAI,KAAKP,KAAL,CAAWQ,cAAX,IAA6B,KAAKC,MAAlC,IAA4C,KAAKA,MAAL,CAAYC,cAA5D,EAA4E;AACxE,YACA;AACI,eAAKV,KAAL,CAAWQ,cAAX,CAA0B,KAAKC,MAAL,CAAYC,cAAZ,CAA2BC,SAA3B,EAA1B;AACH,SAHD,CAIA,gBAAM,CAAE;AACX;AACJ;;;WAED,kBAAS;AAAA;AAAA,UAKGC,QALH;AAAA,UAOGC,KAPH;AAAA,UAsDGC,MAtDH;;AAIL,UAAI,KAAKd,KAAL,CAAWe,MAAf,EAAuB;AACfH,QAAAA,QADe,GACJ,CAAC,KAAKZ,KAAL,CAAWgB,QAAZ,EAAsB,KAAKhB,KAAL,CAAWiB,SAAjC,CADI;AAGfJ,QAAAA,KAHe,GAGP,IAHO;;AAInB,YAAI,KAAKb,KAAL,CAAWa,KAAf,EAAsB;AAClBA,UAAAA,KAAK,gBAAG,iDAAC,OAAD,oBAAa,KAAKb,KAAL,CAAWa,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAR;AACA,8BAAO,iDAAC,qDAAD;AACH,kBAAM,EAAED,QADL;AAEH,kBAAM,EAAE,KAAKZ,KAAL,CAAWkB,MAFhB;AAGH,iBAAK,EAAE,KAAKlB,KAAL,CAAWmB,KAHf;AAIH,qBAAS,EAAE,KAAKnB,KAAL,CAAWoB,SAJnB;AAKH,uBAAW,EAAE,KAAKpB,KAAL,CAAWqB,WALrB;AAMH,kBAAM,EAAE,KAAKrB,KAAL,CAAWsB,MANhB;AAOH,eAAG,EAAE,aAAAC,CAAC;AAAA,qBAAI,KAAI,CAACd,MAAL,GAAcc,CAAlB;AAAA,aAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAQEV,KARF,CAAP;AAUH;;AAED,4BAAO,iDAAC,qDAAD;AACC,gBAAM,EAAED,QADT;AAEC,gBAAM,EAAE,KAAKZ,KAAL,CAAWkB,MAFpB;AAGC,eAAK,EAAE,KAAKlB,KAAL,CAAWmB,KAHnB;AAIC,mBAAS,EAAE,KAAKnB,KAAL,CAAWoB,SAJvB;AAKC,qBAAW,EAAE,KAAKpB,KAAL,CAAWqB,WALzB;AAMC,gBAAM,EAAE,KAAKrB,KAAL,CAAWsB,MANpB;AAOC,aAAG,EAAE,aAAAC,CAAC;AAAA,mBAAI,KAAI,CAACd,MAAL,GAAcc,CAAlB;AAAA,WAPP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAQH;;AAED,UAAI,KAAKvB,KAAL,CAAWwB,QAAf,EAAyB;AACrB,4BAAO,iDAAC,qDAAD;AACC,mBAAS,EAAE,KAAKxB,KAAL,CAAWyB,SADvB;AAEC,eAAK,EAAE,KAAKzB,KAAL,CAAWmB,KAFnB;AAGC,mBAAS,EAAE,KAAKnB,KAAL,CAAWoB,SAHvB;AAIC,qBAAW,EAAE,KAAKpB,KAAL,CAAWqB,WAJzB;AAKC,gBAAM,EAAE,KAAKrB,KAAL,CAAWsB,MALpB;AAMC,aAAG,EAAE,aAAAC,CAAC;AAAA,mBAAI,KAAI,CAACd,MAAL,GAAcc,CAAlB;AAAA,WANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAOH;;AAED,UAAI,KAAKvB,KAAL,CAAW0B,OAAf,EAAwB;AACpB,4BAAO,iDAAC,qDAAD;AACC,mBAAS,EAAE,KAAK1B,KAAL,CAAWyB,SADvB;AAEC,eAAK,EAAE,KAAKzB,KAAL,CAAWmB,KAFnB;AAGC,mBAAS,EAAE,KAAKnB,KAAL,CAAWoB,SAHvB;AAIC,qBAAW,EAAE,KAAKpB,KAAL,CAAWqB,WAJzB;AAKC,gBAAM,EAAE,KAAKrB,KAAL,CAAWsB,MALpB;AAMC,aAAG,EAAE,aAAAC,CAAC;AAAA,mBAAI,KAAI,CAACd,MAAL,GAAcc,CAAlB;AAAA,WANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAOH;;AAED,UAAI,KAAKvB,KAAL,CAAW2B,SAAf,EAA0B;AAElBb,QAAAA,MAFkB,GAET,CACT,CACI,KAAKd,KAAL,CAAW4B,eADf,EAEI,KAAK5B,KAAL,CAAW6B,gBAFf,CADS,EAKT,CACI,KAAK7B,KAAL,CAAW8B,mBADf,EAEI,KAAK9B,KAAL,CAAW+B,oBAFf,CALS,CAFS;AAatB,4BAAO,iDAAC,sDAAD;AACC,gBAAM,EAAEjB,MADT;AAEC,eAAK,EAAE,KAAKd,KAAL,CAAWmB,KAFnB;AAGC,mBAAS,EAAE,KAAKnB,KAAL,CAAWoB,SAHvB;AAIC,qBAAW,EAAE,KAAKpB,KAAL,CAAWqB,WAJzB;AAKC,gBAAM,EAAE,KAAKrB,KAAL,CAAWsB,MALpB;AAMC,aAAG,EAAE,aAAAC,CAAC;AAAA,mBAAI,KAAI,CAACd,MAAL,GAAcc,CAAlB;AAAA,WANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAOH;;AAGD,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACH;;;;EApGsCjC","sources":["webpack://materialui/./Components/map/utils.jsx","webpack://materialui/./Components/map/vector-layer.jsx"],"sourcesContent":["export function isGuid(str) {\r\n    if (str == null) { return false }\r\n\r\n    if (str[0] === \"{\") \r\n    {\r\n        str = str.substring(1, str.length - 1);\r\n    }\r\n    var regexGuid = /^(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}$/gi;\r\n    var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n    return regexGuid.test(str);\r\n}","import React from 'react';\r\nimport { Circle, CircleMarker, Polygon, Polyline, Rectangle } from 'react-leaflet';\r\nimport { isGuid } from './utils';\r\n\r\nexport default class UDVectorLayer extends React.Component {\r\n\r\n    onIncomingEvent(eventName, event) {\r\n        if (event.type === \"removeElement\") {\r\n            this.props.onRemove(this.props.id)\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (!isGuid(this.props.id)) {\r\n            this.pubSubToken = UniversalDashboard.subscribe(this.props.id, this.onIncomingEvent.bind(this));\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.onReportBounds && this.vector && this.vector.leafletElement) {\r\n            try \r\n            {\r\n                this.props.onReportBounds(this.vector.leafletElement.getBounds());\r\n            }\r\n            catch {}\r\n        }\r\n    }\r\n\r\n    render() {\r\n        \r\n\r\n\r\n        if (this.props.circle) {\r\n            var position = [this.props.latitude, this.props.longitude];\r\n\r\n            var popup = null;\r\n            if (this.props.popup) {\r\n                popup = <UDPopup {...this.props.popup} />\r\n                return <CircleMarker\r\n                    center={position} \r\n                    radius={this.props.radius} \r\n                    color={this.props.color} \r\n                    fillColor={this.props.fillColor} \r\n                    fillOpacity={this.props.fillOpacity} \r\n                    weight={this.props.weight}\r\n                    ref={x => this.vector = x}>\r\n                        {popup}\r\n                    </CircleMarker>\r\n            }\r\n\r\n            return <Circle\r\n                    center={position} \r\n                    radius={this.props.radius} \r\n                    color={this.props.color} \r\n                    fillColor={this.props.fillColor} \r\n                    fillOpacity={this.props.fillOpacity} \r\n                    weight={this.props.weight}\r\n                    ref={x => this.vector = x}/>\r\n        }\r\n\r\n        if (this.props.polyline) {\r\n            return <Polyline \r\n                    positions={this.props.positions} \r\n                    color={this.props.color} \r\n                    fillColor={this.props.fillColor} \r\n                    fillOpacity={this.props.fillOpacity} \r\n                    weight={this.props.weight} \r\n                    ref={x => this.vector = x}/>\r\n        }\r\n\r\n        if (this.props.polygon) {\r\n            return <Polygon \r\n                    positions={this.props.positions} \r\n                    color={this.props.color} \r\n                    fillColor={this.props.fillColor} \r\n                    fillOpacity={this.props.fillOpacity} \r\n                    weight={this.props.weight} \r\n                    ref={x => this.vector = x}/>\r\n        }\r\n\r\n        if (this.props.rectangle) {\r\n\r\n            var bounds = [\r\n                [\r\n                    this.props.latitudeTopLeft,\r\n                    this.props.longitudeTopLeft,\r\n                ],\r\n                [\r\n                    this.props.latitudeBottomRight,\r\n                    this.props.longitudeBottomRight,\r\n                ]\r\n            ]\r\n\r\n            return <Rectangle \r\n                    bounds={bounds}\r\n                    color={this.props.color} \r\n                    fillColor={this.props.fillColor} \r\n                    fillOpacity={this.props.fillOpacity} \r\n                    weight={this.props.weight} \r\n                    ref={x => this.vector = x}/>\r\n        }\r\n\r\n        \r\n        return <div>Unknown type</div>\r\n    }\r\n}"],"names":["isGuid","str","substring","length","regexGuid","test","React","Circle","CircleMarker","Polygon","Polyline","Rectangle","UDVectorLayer","eventName","event","type","props","onRemove","id","pubSubToken","UniversalDashboard","subscribe","onIncomingEvent","bind","onReportBounds","vector","leafletElement","getBounds","position","popup","bounds","circle","latitude","longitude","radius","color","fillColor","fillOpacity","weight","x","polyline","positions","polygon","rectangle","latitudeTopLeft","longitudeTopLeft","latitudeBottomRight","longitudeBottomRight","Component"],"sourceRoot":""}