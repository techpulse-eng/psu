{"version":3,"file":"Components_card-toolbar_jsx.xxxxxxxxxxxxxxxxxxxx.bundle.js","mappings":"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","sources":["webpack://materialui/./Components/card-toolbar.jsx","webpack://materialui/./Components/typography.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Toolbar, IconButton, Typography } from \"@mui/material\";\r\nimport withStyles from '@mui/styles/withStyles';\r\nimport classNames from \"classnames\";\r\nimport UdMuTypography from \"./typography\";\r\nimport UdMuIcon from './icon';\r\n\r\nconst styles = theme => ({\r\n  cardToolBar: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    paddingLeft: 16,\r\n    paddingRight: 16,\r\n    maxHeight: 56\r\n  },\r\n  icon: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    flex: \"1 1 auto\",\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n  action: {\r\n    flex: \"0 0 auto\"\r\n  }\r\n});\r\n\r\nexport class UDCardToolBar extends React.Component {\r\n\r\n  onTitle = (classes, style, title) => {\r\n    return (\r\n      title.type === 'mu-typography' ?\r\n        <UdMuTypography\r\n          classes={classNames(classes.title, title.className, \"ud-mu-cardtoolbar-title\")}\r\n          {...title} />\r\n        : <Typography\r\n          variant=\"h6\"\r\n          style={{ color: style.color, font: style.font }}\r\n          className={classNames(classes.title, \"ud-mu-cardtoolbar-title\")}>\r\n          {title}\r\n        </Typography>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      classes,\r\n      onMinimize,\r\n      title,\r\n      icon,\r\n      onShowButtons,\r\n      style,\r\n      content,\r\n    } = this.props;\r\n\r\n    return <>\r\n      <Toolbar\r\n        id={id}\r\n        style={{ ...style }}\r\n        disableGutters\r\n        className={classNames(\"ud-mu-cardtoolbar\", classes.cardToolBar)}\r\n      >\r\n        {icon !== null ? (\r\n          <UdMuIcon className=\"ud-mu-cardtoolbar-icon\" {...icon} />\r\n        ) : null}\r\n        {this.onTitle(classes, style, title)}\r\n        {onShowButtons ? (\r\n          <div\r\n            className={classNames(classes.action, \"ud-mu-cardtoolbar\")}>\r\n            <IconButton className=\"ud-mu-cardtoolbar-minimize\" onClick={onMinimize} size=\"large\">\r\n              <UdMuIcon\r\n                icon=\"Minus\"\r\n                size={content === null ? \"xs\" : content[0].icon.size}\r\n                style={\r\n                  content !== null\r\n                    ? { ...content[0].icon.style }\r\n                    : { color: \"inherit\", backgroundColor: \"transparent\" }\r\n                }\r\n              />\r\n            </IconButton>\r\n            {UniversalDashboard.renderComponent(content)}\r\n\r\n          </div>\r\n        ) : null}\r\n      </Toolbar>\r\n    </>;\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(UDCardToolBar);\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Typography from '@mui/material/Typography'\r\nimport { ReactInterval } from 'react-interval/lib/Component'\r\nimport classNames from 'classnames'\r\n\r\nexport default class UdMuTypography extends React.Component {\r\n  state = {\r\n    text: '',\r\n    errorMessage: '',\r\n    hasError: false,\r\n  }\r\n\r\n  onLoadData = () => {\r\n    if (!this.props.isEndpoint && this.props.content === null) {\r\n      this.setState({\r\n        text: this.props.text,\r\n      })\r\n    }\r\n    if (!this.props.isEndpoint && this.props.content !== null) {\r\n      this.setState({\r\n        text: this.props.content,\r\n      })\r\n    }\r\n    if (this.props.isEndpoint && this.props.content !== null) {\r\n      UniversalDashboard.get(\r\n        `/api/internal/component/element/${this.props.id}`,\r\n        data => {\r\n          data.error\r\n            ? this.setState({\r\n              hasError: true,\r\n              error: data.error,\r\n              errorMessage: data.error.message,\r\n            })\r\n            : this.setState({ text: data })\r\n        },\r\n      )\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.onLoadData()\r\n  }\r\n\r\n  onIncomingEvent = (eventName, event) => {\r\n    if (event.type === 'syncElement') {\r\n      this.onLoadData()\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.id !== this.props.id) {\r\n      this.onLoadData()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      // classes,\r\n      style,\r\n      align,\r\n      gutterBottom,\r\n      noWrap,\r\n      // isParagraph,\r\n      variant,\r\n      refreshInterval,\r\n      // isEndpoint,\r\n      autoRefresh,\r\n    } = this.props\r\n    const { text } = this.state\r\n\r\n    const typo = (\r\n      <Typography\r\n        id={id}\r\n        className={classNames('ud-mu-typography', this.props.className)}\r\n        align={align}\r\n        gutterBottom={gutterBottom}\r\n        noWrap={noWrap}\r\n        style={style}\r\n        variant={variant} >\r\n        {text}\r\n        <ReactInterval\r\n          timeout={refreshInterval * 1000}\r\n          enabled={autoRefresh}\r\n          callback={this.onLoadData}\r\n        />\r\n      </Typography>\r\n    )\r\n\r\n    return align ? <div style={{ textAlign: align }}>{typo}</div> : typo;\r\n  }\r\n}\r\n"],"names":["React","Toolbar","IconButton","Typography","withStyles","classNames","UdMuTypography","UdMuIcon","styles","theme","cardToolBar","display","alignItems","paddingLeft","paddingRight","maxHeight","icon","marginRight","spacing","title","flex","marginLeft","action","UDCardToolBar","classes","style","type","className","color","font","props","id","onMinimize","onShowButtons","content","onTitle","size","backgroundColor","UniversalDashboard","renderComponent","Component","PropTypes","ReactInterval","text","errorMessage","hasError","isEndpoint","setState","get","data","error","message","eventName","event","onLoadData","prevProps","align","gutterBottom","noWrap","variant","refreshInterval","autoRefresh","state","typo","textAlign"],"sourceRoot":""}