{"version":3,"file":"node_modules_monaco-editor_esm_vs_basic-languages_css_css_js.xxxxxxxxxxxxxxxxxxxx.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACa;AACN;AACP;AACA;AACA;AACA,KAAK;AACL;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA,UAAU,QAAQ,YAAY,iCAAiC;AAC/D,UAAU,qDAAqD;AAC/D,UAAU,qDAAqD;AAC/D,UAAU,qDAAqD;AAC/D,UAAU;AACV;AACA;AACA,UAAU,QAAQ,YAAY,GAAG;AACjC,UAAU,uBAAuB;AACjC,UAAU,uBAAuB;AACjC,UAAU,uBAAuB;AACjC,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,kDAAkD,IAAI,mDAAmD,IAAI;AAC7G;AACA,UAAU,QAAQ,YAAY,+BAA+B;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,uDAAuD;AACjE,UAAU;AACV;AACA;AACA;AACA,cAAc,sBAAsB;AACpC;AACA;AACA,cAAc,sBAAsB;AACpC,cAAc,oBAAoB;AAClC,cAAc,qBAAqB;AACnC,+EAA+E,gDAAgD;AAC/H,4DAA4D,kBAAkB;AAC9E,yCAAyC,4CAA4C;AACrF,wDAAwD,yDAAyD;AACjH,iDAAiD,yDAAyD;AAC1G,cAAc,0BAA0B;AACxC;AACA;AACA,sBAAsB,wDAAwD;AAC9E,eAAe,KAAK,mDAAmD;AACvE;AACA;AACA,cAAc,sBAAsB;AACpC,mDAAmD,KAAK;AACxD,eAAe,KAAK,0CAA0C;AAC9D;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,cAAc,kBAAkB;AAChC,oBAAoB,0CAA0C;AAC9D;AACA;AACA,cAAc,sBAAsB;AACpC,wDAAwD,yDAAyD;AACjH,iDAAiD,yDAAyD;AAC1G,cAAc,gCAAgC;AAC9C,cAAc,qBAAqB;AACnC,cAAc,kBAAkB;AAChC;AACA;AACA;AACA;AACA,cAAc,sBAAsB;AACpC,cAAc,qBAAqB;AACnC,cAAc,kBAAkB;AAChC;AACA,eAAe;AACf,kBAAkB,MAAM,yBAAyB;AACjD;AACA;AACA,kCAAkC,4CAA4C;AAC9E;AACA;AACA,8BAA8B,4CAA4C;AAC1E;AACA;AACA,cAAc,qBAAqB;AACnC;AACA,sBAAsB,8CAA8C;AACpE;AACA;AACA,cAAc,kBAAkB;AAChC,sBAAsB,8CAA8C;AACpE;AACA;AACA,cAAc,kBAAkB;AAChC,eAAe;AACf,kBAAkB,MAAM,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,iDAAiD;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK,uDAAuD;AAC3E;AACA;AACA,cAAc,kBAAkB;AAChC,eAAe,KAAK,mDAAmD;AACvE,eAAe,KAAK,0CAA0C;AAC9D;AACA;AACA,iCAAiC,sDAAsD;AACvF;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC,sBAAsB,wCAAwC;AAC9D;AACA;AACA,sBAAsB,gDAAgD;AACtE,uBAAuB,0CAA0C;AACjE;AACA;AACA;AACA,oBAAoB,+BAA+B;AACnD;AACA;AACA;AACA;AACA;AACA,qBAAqB,+BAA+B;AACpD;AACA;AACA;AACA;AACA","sources":["webpack://materialui/./node_modules/monaco-editor/esm/vs/basic-languages/css/css.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    wordPattern: /(#?-?\\d*\\.\\d\\w*%?)|((::|[@#.!:])?[\\w-?]+%?)|::|[@#.!:]/g,\n    comments: {\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/\"),\n            end: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/\")\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.css',\n    ws: '[ \\t\\n\\r\\f]*',\n    identifier: '-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*',\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.bracket' },\n        { open: '[', close: ']', token: 'delimiter.bracket' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '<', close: '>', token: 'delimiter.angle' }\n    ],\n    tokenizer: {\n        root: [\n            { include: '@selector' },\n        ],\n        selector: [\n            { include: '@comments' },\n            { include: '@import' },\n            { include: '@strings' },\n            ['[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)', { token: 'keyword', next: '@keyframedeclaration' }],\n            ['[@](page|content|font-face|-moz-document)', { token: 'keyword' }],\n            ['[@](charset|namespace)', { token: 'keyword', next: '@declarationbody' }],\n            ['(url-prefix)(\\\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],\n            ['(url)(\\\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],\n            { include: '@selectorname' },\n            ['[\\\\*]', 'tag'],\n            ['[>\\\\+,]', 'delimiter'],\n            ['\\\\[', { token: 'delimiter.bracket', next: '@selectorattribute' }],\n            ['{', { token: 'delimiter.bracket', next: '@selectorbody' }]\n        ],\n        selectorbody: [\n            { include: '@comments' },\n            ['[*_]?@identifier@ws:(?=(\\\\s|\\\\d|[^{;}]*[;}]))', 'attribute.name', '@rulevalue'],\n            ['}', { token: 'delimiter.bracket', next: '@pop' }]\n        ],\n        selectorname: [\n            ['(\\\\.|#(?=[^{])|%|(@identifier)|:)+', 'tag'],\n        ],\n        selectorattribute: [\n            { include: '@term' },\n            [']', { token: 'delimiter.bracket', next: '@pop' }],\n        ],\n        term: [\n            { include: '@comments' },\n            ['(url-prefix)(\\\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],\n            ['(url)(\\\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],\n            { include: '@functioninvocation' },\n            { include: '@numbers' },\n            { include: '@name' },\n            ['([<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,])', 'delimiter'],\n            [',', 'delimiter']\n        ],\n        rulevalue: [\n            { include: '@comments' },\n            { include: '@strings' },\n            { include: '@term' },\n            ['!important', 'keyword'],\n            [';', 'delimiter', '@pop'],\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\n        ],\n        warndebug: [\n            ['[@](warn|debug)', { token: 'keyword', next: '@declarationbody' }]\n        ],\n        import: [\n            ['[@](import)', { token: 'keyword', next: '@declarationbody' }]\n        ],\n        urldeclaration: [\n            { include: '@strings' },\n            ['[^)\\r\\n]+', 'string'],\n            ['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }]\n        ],\n        parenthizedterm: [\n            { include: '@term' },\n            ['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }]\n        ],\n        declarationbody: [\n            { include: '@term' },\n            [';', 'delimiter', '@pop'],\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\n        ],\n        comments: [\n            ['\\\\/\\\\*', 'comment', '@comment'],\n            ['\\\\/\\\\/+.*', 'comment']\n        ],\n        comment: [\n            ['\\\\*\\\\/', 'comment', '@pop'],\n            [/[^*/]+/, 'comment'],\n            [/./, 'comment'],\n        ],\n        name: [\n            ['@identifier', 'attribute.value']\n        ],\n        numbers: [\n            ['-?(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?', { token: 'attribute.value.number', next: '@units' }],\n            ['#[0-9a-fA-F_]+(?!\\\\w)', 'attribute.value.hex']\n        ],\n        units: [\n            ['(em|ex|ch|rem|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?', 'attribute.value.unit', '@pop']\n        ],\n        keyframedeclaration: [\n            ['@identifier', 'attribute.value'],\n            ['{', { token: 'delimiter.bracket', switchTo: '@keyframebody' }],\n        ],\n        keyframebody: [\n            { include: '@term' },\n            ['{', { token: 'delimiter.bracket', next: '@selectorbody' }],\n            ['}', { token: 'delimiter.bracket', next: '@pop' }],\n        ],\n        functioninvocation: [\n            ['@identifier\\\\(', { token: 'attribute.value', next: '@functionarguments' }],\n        ],\n        functionarguments: [\n            ['\\\\$@identifier@ws:', 'attribute.name'],\n            ['[,]', 'delimiter'],\n            { include: '@term' },\n            ['\\\\)', { token: 'attribute.value', next: '@pop' }],\n        ],\n        strings: [\n            ['~?\"', { token: 'string', next: '@stringenddoublequote' }],\n            ['~?\\'', { token: 'string', next: '@stringendquote' }]\n        ],\n        stringenddoublequote: [\n            ['\\\\\\\\.', 'string'],\n            ['\"', { token: 'string', next: '@pop' }],\n            [/[^\\\\\"]+/, 'string'],\n            ['.', 'string']\n        ],\n        stringendquote: [\n            ['\\\\\\\\.', 'string'],\n            ['\\'', { token: 'string', next: '@pop' }],\n            [/[^\\\\']+/, 'string'],\n            ['.', 'string']\n        ]\n    }\n};\n"],"names":[],"sourceRoot":""}