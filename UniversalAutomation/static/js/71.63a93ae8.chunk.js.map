{"version":3,"sources":["components/api/components/output-card.tsx"],"names":["PowerShellOutputCard","id","useParams","copyResponse","useClipboard","onSuccess","text","message","info","copy","useQuery","endpoint","data","isEndpointLoading","isLoading","React","useState","method","setMethod","useEffect","setIsLoading","value","setValue","getOutput","a","axios","url","window","location","origin","output","JSON","stringify","spinning","title","bordered","style","minWidth","extra","requiredRoles","size","defaultValue","onChange","e","map","x","Option","type","icon","onClick","bodyStyle","padding","headStyle","borderBottom","height","language","loading","options","readOnly","minimap","renderCharacters","maxColumn"],"mappings":"8ZAkBe,SAASA,IAAwB,IACtCC,EAAOC,cAAPD,GACME,EAAiBC,YAAa,CAC1CC,UAAW,SAACC,GAAD,OAAUC,IAAQC,KAAR,uBADfC,KAFqC,EAMYC,YAAQ,oBAAwBT,IAA3EU,EAN+B,EAMrCC,KAA2BC,EANU,EAMrBC,UANqB,EAOjBC,IAAMC,SAAiB,OAPN,mBAOtCC,EAPsC,KAO9BC,EAP8B,KAS7CH,IAAMI,WAAU,WAKd,OAJKN,GACHK,EAAUP,EAASM,OAAO,IAGrB,eACN,CAACJ,EAAmBF,IAfsB,MAiBXI,IAAMC,UAAS,GAjBJ,mBAiBtCF,EAjBsC,KAiB3BM,EAjB2B,OAkBnBL,IAAMC,SAAS,IAlBI,mBAkBtCK,EAlBsC,KAkB/BC,EAlB+B,KAoBvCC,EAAS,uCAAG,4BAAAC,EAAA,6DAChBJ,GAAa,GADG,SAGGK,IAAM,CACvBC,IAAI,GAAD,OAAKC,OAAOC,SAASC,QAArB,cAA8BlB,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAUe,KAC3CT,WALc,OAGZa,EAHY,OAQhBR,EAASS,KAAKC,UAAUF,EAAOlB,OAC/BQ,GAAa,GATG,2CAAH,qDAYf,OACE,cAAC,IAAD,CAAQa,SAAUnB,EAAlB,SACE,cAAC,IAAD,CACEoB,MAAOpB,EAAY,eAAiB,SACpCqB,UAAU,EACVC,MAAO,CAAEC,SAAU,QACnBC,MACE,cAAC,IAAD,CAAWC,cAAe,CAAC,WAAY,iBAAvC,SACE,eAAC,IAAD,CAAOC,KAAK,QAAZ,UACE,cAAC,UAAD,CAAQC,aAAY,OAAE9B,QAAF,IAAEA,OAAF,EAAEA,EAAUM,OAAO,GAAIyB,SAAU,SAAAC,GAAC,OAAIzB,EAAUyB,IAAItB,MAAOJ,EAA/E,gBACGN,QADH,IACGA,OADH,EACGA,EAAUM,OAAO2B,KAAI,SAAAC,GAAC,OAAI,cAAC,UAAOC,OAAR,CAAezB,MAAOwB,EAAtB,SAA0BA,SAEvD,cAAC,IAAD,CAASX,MAAOpB,EAAY,QAAU,MAAtC,SACE,cAAC,IAAD,CACEiC,KAAK,OACLC,KACElC,EAAY,cAAC,IAAD,IAA0B,cAAC,IAAD,IAExCmC,QAAS,kBAAM1B,SAGnB,cAAC,IAAD,CAASW,MAAM,OAAf,SACE,cAAC,IAAD,CACEa,KAAK,OACLC,KAAM,cAAC,IAAD,IACNC,QAAS,kBAAM9C,EAAakB,aAMtC6B,UAAW,CAAEC,QAAS,GACtBC,UAAW,CACTC,aAAc,SA/BlB,SAkCE,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,OAAO,aACPC,SAAS,OACTC,QAAS1C,EACTO,MAAOA,EACPoC,QAAS,CACPC,UAAU,EACVC,QAAS,CACPC,kBAAkB,EAClBC,UAAW","file":"static/js/71.63a93ae8.chunk.js","sourcesContent":["/* eslint-disable import/no-webpack-loader-syntax */\r\n// @ts-ignore\r\nimport React from \"react\";\r\nimport { Button, message, Card, Tooltip, Space, Select } from \"antd\";\r\nimport {\r\n  CopyOutlined,\r\n  PauseCircleOutlined,\r\n  PlayCircleOutlined,\r\n} from \"@ant-design/icons\";\r\nimport Loader from \"components/utils/Loader\";\r\nimport useClipboard from \"use-clipboard-hook\";\r\nimport RoleGuard from \"../../standalone/role-guard\";\r\nimport { Endpoint } from \"types\";\r\nimport { BaseEditor, CodeEditor } from \"components/ui/Editor/Editor\";\r\nimport axios, { Method } from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useQuery } from \"react-query3\";\r\n\r\nexport default function PowerShellOutputCard() {\r\n  const { id } = useParams();\r\n  const { copy: copyResponse } = useClipboard({\r\n    onSuccess: (text) => message.info(`Response copied.`),\r\n  });\r\n\r\n  const { data: endpoint, isLoading: isEndpointLoading } = useQuery<Endpoint>(`/endpoint/${id}`);\r\n  const [method, setMethod] = React.useState<Method>(\"GET\");\r\n\r\n  React.useEffect(() => {\r\n    if (!isEndpointLoading) {\r\n      setMethod(endpoint.method[0]);\r\n    }\r\n\r\n    return () => { }\r\n  }, [isEndpointLoading, endpoint])\r\n\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [value, setValue] = React.useState(\"\");\r\n\r\n  const getOutput = async () => {\r\n    setIsLoading(true);\r\n\r\n    let output = await axios({\r\n      url: `${window.location.origin}${endpoint?.url}`,\r\n      method\r\n    })\r\n\r\n    setValue(JSON.stringify(output.data));\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return (\r\n    <Loader spinning={isLoading}>\r\n      <Card\r\n        title={isLoading ? \"Executing...\" : \"Output\"}\r\n        bordered={true}\r\n        style={{ minWidth: \"100%\" }}\r\n        extra={\r\n          <RoleGuard requiredRoles={[\"Operator\", \"Administrator\"]}>\r\n            <Space size=\"small\">\r\n              <Select defaultValue={endpoint?.method[0]} onChange={e => setMethod(e)} value={method}>\r\n                {endpoint?.method.map(x => <Select.Option value={x}>{x}</Select.Option>)}\r\n              </Select>\r\n              <Tooltip title={isLoading ? \"Pause\" : \"Run\"}>\r\n                <Button\r\n                  type=\"text\"\r\n                  icon={\r\n                    isLoading ? <PauseCircleOutlined /> : <PlayCircleOutlined />\r\n                  }\r\n                  onClick={() => getOutput()}\r\n                />\r\n              </Tooltip>\r\n              <Tooltip title=\"Copy\">\r\n                <Button\r\n                  type=\"text\"\r\n                  icon={<CopyOutlined />}\r\n                  onClick={() => copyResponse(value)}\r\n                />\r\n              </Tooltip>\r\n            </Space>\r\n          </RoleGuard>\r\n        }\r\n        bodyStyle={{ padding: 0 }}\r\n        headStyle={{\r\n          borderBottom: \"unset\",\r\n        }}\r\n      >\r\n        <CodeEditor>\r\n          <BaseEditor\r\n            height=\"calc(30vh)\"\r\n            language=\"json\"\r\n            loading={isLoading}\r\n            value={value}\r\n            options={{\r\n              readOnly: true,\r\n              minimap: {\r\n                renderCharacters: false,\r\n                maxColumn: 80,\r\n              },\r\n            }}\r\n          />\r\n        </CodeEditor>\r\n      </Card>\r\n    </Loader>\r\n  );\r\n}\r\n"],"sourceRoot":""}