{"version":3,"sources":["components/settings/NewRoleModal.tsx","components/settings/Roles.tsx","components/ui/BuyLicenseAlertBox.tsx","components/ui/EditModal.tsx"],"names":["NewRoleModal","useModalContext","onOk","form","Modal","requiredRoles","requiredAccessControls","AccessControlTypes","Create","allowedWithOneWayGitSync","children","title","onClickOk","formName","Form","schemaName","name","preserve","Roles","React","useState","claimInfoModalOpen","setClaimInfoModalOpen","useQuery","enabled","refetchOnWindowFocus","roles","data","isLoading","refetch","claims","claimsLoading","clearCache","a","axios","delete","message","success","setHidden","record","columns","key","dataIndex","sortable","editable","width","render","text","EditModal","to","pathname","id","type","icon","CodeFilled","DeleteButton","hidden","resource","subTitle","extra","onClick","EyeOutlined","DeleteOutlined","url","Table","actions","loading","queryFn","visible","onCancel","cancelButtonProps","identity","BuyLicenseAlertBox","align","style","justifyContent","Link","href","target","props","getButtonProps","useActionButton","normalizedRecord","useNormalizeData","licensed","useAppStore","Edit","accessControls","action","resourceInfo","self","parent","inEditMode","defaultValues","Feature","Dashboard"],"mappings":"qXAUe,SAASA,IAAgB,IAAD,EACdC,cAAfC,EAD6B,EAC7BA,KAAMC,EADuB,EACvBA,KAMd,OACE,eAAC,WAAD,WACE,cAACC,EAAA,EAAD,CAAiBC,cAAe,CAAC,iBAAkBC,uBAAwBC,IAAmBC,OAAQC,0BAA0B,EAAhI,SACE,cAAC,IAAD,CAAQC,SAAS,mBAEnB,cAACN,EAAA,EAAD,CAAcO,MAAM,WAAWC,UATnC,WACEV,EAAK,QAAS,SAAU,KAQ8BW,SAAS,mBAA7D,SACE,cAACC,EAAA,EAAD,CAAMC,WAAW,OAAjB,SACE,cAACD,EAAA,EAAD,CACEE,KAAK,mBACLb,KAAMA,EACNc,UAAU,W,kECbP,SAASC,IAAS,IAAD,EACsBC,IAAMC,UAAS,GADrC,mBACvBC,EADuB,KACHC,EADG,OAEcC,YAAiB,QAAS,CACpEC,SAAS,EACTC,sBAAsB,IAFVC,EAFgB,EAEtBC,KAAaC,EAFS,EAETA,UAAWC,EAFF,EAEEA,QAFF,EAOqBN,YAAc,mBAAoB,CACnFE,sBAAsB,IADVK,EAPgB,EAOtBH,KAAyBI,EAPH,EAORH,UAIhBI,EAAU,uCAAG,sBAAAC,EAAA,sEACXC,IAAMC,OAAN,wBADW,OAEjBC,IAAQC,QAAQ,yBAFC,2CAAH,qDAKhB,SAASC,EAAUC,GACjB,MAAuB,kBAAhBA,EAAOvB,MACI,aAAhBuB,EAAOvB,MACS,YAAhBuB,EAAOvB,MACS,SAAhBuB,EAAOvB,MACS,WAAhBuB,EAAOvB,KAKX,IAiBMwB,EAAiC,CACrC,CACEC,IAAK,OACL9B,MAAO,OACP+B,UAAW,OACXC,UAAU,EACVC,UAAU,GAEZ,CACEH,IAAK,cACL9B,MAAO,cACP+B,UAAW,cACXC,UAAU,EACVC,UAAU,GAEZ,CACEC,MAAO,cACPH,UAAW,UACXE,UAAU,EACVE,OAAQ,SAACC,EAAMR,GACb,OACE,eAAC,IAAD,WACE,cAACnC,EAAA,EAAD,UACE,cAAC4C,EAAA,QAAD,CAAWT,OAAQA,EAAQ9B,0BAA0B,MAEvD,cAAC,IAAD,CACEwC,GAAI,CACFC,SAAS,GAAD,OAAKX,EAAOY,KAFxB,SAKE,cAAC,IAAD,CAAQC,KAAK,OAAOC,KAAM,cAACC,EAAA,EAAD,QAE5B,cAACC,EAAA,QAAD,CAAcC,OAAQlB,EAAUC,GAASkB,SAAUlB,EAAQ9B,0BAA0B,UAO/F,OACE,eAAC,IAAD,CAAYE,MAAM,QAAQ+C,SAAS,+BAA+BC,MAAO,CACvE,cAAC,IAAD,CAAQC,QAAS,kBAAMtC,GAAsB,IAAO+B,KAAM,cAACQ,EAAA,EAAD,IAA1D,qCACA,cAAC,IAAD,CAAQD,QAAS5B,EAAYqB,KAAM,cAACS,EAAA,EAAD,IAAnC,kCACA,cAAC,IAAD,CAAYC,IAAI,mCAHlB,UAKE,cAACC,EAAA,QAAD,CACErD,MAAM,QACNsD,QAAS,CACP,cAAC7D,EAAA,EAAD,UACE,cAAC,EAAD,OAGJuB,KAAMD,EACNc,QAASA,EACT0B,QAAStC,EACTuC,QAAStC,IAEX,cAAC,IAAD,CAAQuC,QAAS/C,EACfgD,SAAU,kBAAM/C,GAAsB,IACtCpB,KAAM,kBAAMoB,GAAsB,IAClCgD,kBAAmB,CAAEd,QAAQ,GAC7BX,MAAM,MAJR,SAKE,cAACmB,EAAA,QAAD,CACErD,OAAa,OAANmB,QAAM,IAANA,OAAA,EAAAA,EAAQyC,SAASvD,MAAO,YAC/BW,KAAI,OAAEG,QAAF,IAAEA,OAAF,EAAEA,EAAQA,OACdU,QAlFoC,CAC1C,CACEC,IAAK,OACL9B,MAAO,OACP+B,UAAW,OACXC,UAAU,EACVC,UAAU,GAEZ,CACEH,IAAK,QACL9B,MAAO,QACP+B,UAAW,QACXC,UAAU,EACVC,UAAU,IAsENsB,QAASnC,W,iCC3HnB,6EAGe,SAASyC,IACtB,OACE,cAAC,IAAD,CACEpB,KAAK,OACLhB,QACE,eAAC,IAAD,CACEqC,MAAM,SACNC,MAAO,CAAE7B,MAAO,OAAQ8B,eAAgB,iBAF1C,+CAKE,cAAC,IAAWC,KAAZ,CACEC,KAAK,gEACLC,OAAO,SAFT,iC,wLCOK,SAAS9B,EAAT,GAKK,IAAD,EAJjBT,EAIiB,EAJjBA,OACAxB,EAGiB,EAHjBA,WACAN,EAEiB,EAFjBA,yBACGsE,EACc,kEACTC,EAAmBC,cAAnBD,eACFE,EAAmBC,cAFR,EAGMlF,cAAfC,EAHS,EAGTA,KAAMC,EAHG,EAGHA,KACNiF,EAAaC,cAAbD,SAwBR,OACE,qCACE,cAAC,IAAD,CAAiB/E,cAAe,CAAC,gBAAiB,YAAaC,uBAAwBC,IAAmB+E,KAAMC,eAAgBR,EAAMQ,eAAgB9E,yBAA0BA,EAAhL,SACE,cAAC,IAAD,uCACMsE,GACAC,EAAe,CAAEQ,OAAQ,UAF/B,IAGEA,OAAO,YAGX,eAAC,IAAD,CAAc7E,MAAM,gBAAgBC,UA/BxC,WAAqB,IAAD,oBAY+B,EAV7C6B,EAA2C,SAA/B,OAANF,QAAM,IAANA,GAAA,UAAAA,EAAQkD,oBAAR,eAAsB1E,aACO,UAA/B,OAANwB,QAAM,IAANA,GAAA,UAAAA,EAAQkD,oBAAR,eAAsB1E,aACe,cAA/B,OAANwB,QAAM,IAANA,GAAA,UAAAA,EAAQkD,oBAAR,eAAsB1E,aACe,eAA/B,OAANwB,QAAM,IAANA,GAAA,UAAAA,EAAQkD,oBAAR,eAAsB1E,aACe,eAA/B,OAANwB,QAAM,IAANA,GAAA,UAAAA,EAAQkD,oBAAR,eAAsB1E,aACe,cAA/B,OAANwB,QAAM,IAANA,GAAA,UAAAA,EAAQkD,oBAAR,eAAsB1E,aACe,qBAA/B,OAANwB,QAAM,IAANA,GAAA,UAAAA,EAAQkD,oBAAR,eAAsB1E,YANd,OAONwB,QAPM,IAONA,GAPM,UAONA,EAAQkD,oBAPF,aAON,EAAsBC,KAPhB,OAQNnD,QARM,IAQNA,GARM,UAQNA,EAAQkD,oBARF,aAQN,EAAsBE,OAEe,UAA/B,OAANpD,QAAM,IAANA,GAAA,UAAAA,EAAQkD,oBAAR,eAAsB1E,cACxB0B,GAAY,OAANF,QAAM,IAANA,GAAA,UAAAA,EAAQkD,oBAAR,eAAsBC,MAAO,uBAGrCxF,EAAKuC,EACH,SACAF,IAaA,UACE,cAAC,IAAD,CAAMxB,WAAYA,IAAU,OAAIwB,QAAJ,IAAIA,GAAJ,UAAIA,EAAQkD,oBAAZ,aAAI,EAAsB1E,YAAtD,SACE,cAAC,IAAD,CACEC,KAAK,YACLb,KAAMA,EACNyF,YAAY,EACZ3E,UAAU,EACV4E,cAAeX,EAAiB3C,QAGlC6C,EAASU,IAAQC,YAAc,cAAC,IAAD","file":"static/js/38.99c35897.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { AccessControlTypes, Role } from \"../../types\";\r\nimport { Button } from \"antd\";\r\nimport {\r\n  ModalContent,\r\n  ModalOpenButton,\r\n  useModalContext,\r\n} from \"components/ui/Modal\";\r\nimport { Form, FormContentBase } from \"components/ui/Form/Form\";\r\n\r\nexport default function NewRoleModal() {\r\n  const { onOk, form } = useModalContext();\r\n\r\n  function handleOk() {\r\n    onOk(\"/role\", \"create\", {} as Role);\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <ModalOpenButton requiredRoles={[\"Administrator\"]} requiredAccessControls={AccessControlTypes.Create} allowedWithOneWayGitSync={false}>\r\n        <Button children=\"Add New Role\" />\r\n      </ModalOpenButton>\r\n      <ModalContent title=\"New Role\" onClickOk={handleOk} formName=\"create_role_form\">\r\n        <Form schemaName=\"role\">\r\n          <FormContentBase\r\n            name=\"create_role_form\"\r\n            form={form}\r\n            preserve={false}\r\n          />\r\n        </Form>\r\n      </ModalContent>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useQuery } from \"react-query3\";\r\nimport { Button, PageHeader, Space, Modal as AModal, message } from \"antd\";\r\nimport { Modal } from \"../ui/Modal\";\r\nimport { CustomColumns, Role } from \"../../types\";\r\nimport Table from \"../ui/Table\";\r\nimport EditModal from \"../ui/EditModal\";\r\nimport DeleteButton from \"../ui/DeleteButton\";\r\nimport RoleModal from \"components/settings/NewRoleModal\";\r\nimport { CodeFilled, DeleteOutlined, EyeOutlined } from \"@ant-design/icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport DocsButton from \"components/docsButton\";\r\n\r\nexport default function Roles() {\r\n  const [claimInfoModalOpen, setClaimInfoModalOpen] = React.useState(false);\r\n  const { data: roles, isLoading, refetch } = useQuery<Role[]>(\"/role\", {\r\n    enabled: false,\r\n    refetchOnWindowFocus: false,\r\n  });\r\n\r\n  const { data: claims, isLoading: claimsLoading } = useQuery<any>(\"/identity/claims\", {\r\n    refetchOnWindowFocus: false,\r\n  });\r\n\r\n  const clearCache = async () => {\r\n    await axios.delete(`/api/v1/cache/claims`);\r\n    message.success(\"Cleared Cached Calims\");\r\n  }\r\n\r\n  function setHidden(record) {\r\n    return record.name === \"Administrator\" ||\r\n      record.name === \"Operator\" ||\r\n      record.name === \"Execute\" ||\r\n      record.name === \"User\" ||\r\n      record.name === \"Reader\"\r\n      ? true\r\n      : false;\r\n  }\r\n\r\n  const claimColumns: CustomColumns<Role>[] = [\r\n    {\r\n      key: \"type\",\r\n      title: \"Type\",\r\n      dataIndex: \"type\",\r\n      sortable: true,\r\n      editable: false,\r\n    },\r\n    {\r\n      key: \"value\",\r\n      title: \"Value\",\r\n      dataIndex: \"value\",\r\n      sortable: true,\r\n      editable: false,\r\n    }\r\n  ];\r\n\r\n  const columns: CustomColumns<Role>[] = [\r\n    {\r\n      key: \"name\",\r\n      title: \"Name\",\r\n      dataIndex: \"name\",\r\n      sortable: true,\r\n      editable: false,\r\n    },\r\n    {\r\n      key: \"description\",\r\n      title: \"Description\",\r\n      dataIndex: \"description\",\r\n      sortable: true,\r\n      editable: false,\r\n    },\r\n    {\r\n      width: \"fit-content\",\r\n      dataIndex: \"actions\",\r\n      editable: false,\r\n      render: (text, record) => {\r\n        return (\r\n          <Space>\r\n            <Modal>\r\n              <EditModal record={record} allowedWithOneWayGitSync={false} />\r\n            </Modal>\r\n            <Link\r\n              to={{\r\n                pathname: `${record.id}`,\r\n              }}\r\n            >\r\n              <Button type=\"text\" icon={<CodeFilled />} />\r\n            </Link>\r\n            <DeleteButton hidden={setHidden(record)} resource={record} allowedWithOneWayGitSync={false} />\r\n          </Space >\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <PageHeader title=\"Roles\" subTitle=\"Roles based access controls.\" extra={[\r\n      <Button onClick={() => setClaimInfoModalOpen(true)} icon={<EyeOutlined />}> View Claim Information</Button >,\r\n      <Button onClick={clearCache} icon={<DeleteOutlined />}> Clear Cached Claims</Button >,\r\n      <DocsButton url=\"config/security#authorization\" />\r\n    ]}>\r\n      <Table\r\n        title=\"Roles\"\r\n        actions={[\r\n          <Modal>\r\n            <RoleModal />\r\n          </Modal>,\r\n        ]}\r\n        data={roles}\r\n        columns={columns}\r\n        loading={isLoading}\r\n        queryFn={refetch}\r\n      />\r\n      <AModal visible={claimInfoModalOpen}\r\n        onCancel={() => setClaimInfoModalOpen(false)}\r\n        onOk={() => setClaimInfoModalOpen(false)}\r\n        cancelButtonProps={{ hidden: true }}\r\n        width=\"75%\">\r\n        <Table\r\n          title={claims?.identity.name + \" - Claims\"}\r\n          data={claims?.claims}\r\n          columns={claimColumns}\r\n          loading={claimsLoading}\r\n        />\r\n      </AModal>\r\n    </PageHeader>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Alert, Space, Typography } from \"antd\";\r\n\r\nexport default function BuyLicenseAlertBox() {\r\n  return (\r\n    <Alert\r\n      type=\"info\"\r\n      message={\r\n        <Space\r\n          align=\"center\"\r\n          style={{ width: \"100%\", justifyContent: \"space-between\" }}\r\n        >\r\n          Authentication requires a license.\r\n          <Typography.Link\r\n            href=\"https://ironmansoftware.com/powershell-universal/?rel=product\"\r\n            target=\"_blank\"\r\n          >\r\n            Buy License.\r\n          </Typography.Link>\r\n        </Space>\r\n      }\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { AccessControlTypes, Feature, PSUTypes, RoleGuardProps } from \"types\";\r\nimport { Button, ButtonProps } from \"antd\";\r\nimport { Form, FormContentBase } from \"./Form/Form\";\r\nimport { useActionButton } from \"components/utils/hooks/useActionButton\";\r\nimport { useModalContext, ModalOpenButton, ModalContent } from \"./Modal\";\r\nimport useNormalizeData from \"components/utils/normalizedRecord\";\r\nimport BuyLicenseAlertBox from \"./BuyLicenseAlertBox\";\r\nimport useAppStore from \"components/context/app/Hooks\";\r\n\r\n\r\ntype EditModalProps = {\r\n  action?: string;\r\n  record: PSUTypes;\r\n  schemaName?: string | undefined;\r\n  accessControl?: AccessControlTypes;\r\n  allowedWithOneWayGitSync: boolean;\r\n} & Omit<ButtonProps, \"resource\"> &\r\n  Omit<RoleGuardProps, \"children\">;\r\n\r\nexport default function EditModal({\r\n  record,\r\n  schemaName,\r\n  allowedWithOneWayGitSync,\r\n  ...props\r\n}: EditModalProps) {\r\n  const { getButtonProps } = useActionButton();\r\n  const normalizedRecord = useNormalizeData();\r\n  const { onOk, form } = useModalContext();\r\n  const { licensed } = useAppStore()\r\n\r\n  function handleOk() {\r\n\r\n    let key = record?.resourceInfo?.schemaName === \"tag\" ||\r\n      record?.resourceInfo?.schemaName === \"role\" ||\r\n      record?.resourceInfo?.schemaName === \"endpoint\" ||\r\n      record?.resourceInfo?.schemaName === \"ratelimit\" ||\r\n      record?.resourceInfo?.schemaName === \"dashboard\" ||\r\n      record?.resourceInfo?.schemaName === \"schedule\" ||\r\n      record?.resourceInfo?.schemaName === \"publishedfolder\"\r\n      ? record?.resourceInfo?.self\r\n      : record?.resourceInfo?.parent\r\n\r\n    if (record?.resourceInfo?.schemaName === \"page\") {\r\n      key = record?.resourceInfo?.self + \"?ignoreContent=true\"\r\n    }\r\n\r\n    onOk(key,\r\n      \"update\",\r\n      record\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ModalOpenButton requiredRoles={[\"Administrator\", \"Operator\"]} requiredAccessControls={AccessControlTypes.Edit} accessControls={props.accessControls} allowedWithOneWayGitSync={allowedWithOneWayGitSync}>\r\n        <Button\r\n          {...props}\r\n          {...getButtonProps({ action: \"edit\" })}\r\n          action=\"edit\"\r\n        />\r\n      </ModalOpenButton>\r\n      <ModalContent title=\"Edit Resource\" onClickOk={handleOk}>\r\n        <Form schemaName={schemaName || record?.resourceInfo?.schemaName}>\r\n          <FormContentBase\r\n            name=\"edit_form\"\r\n            form={form}\r\n            inEditMode={true}\r\n            preserve={false}\r\n            defaultValues={normalizedRecord(record)}\r\n          />\r\n        </Form>\r\n        {!licensed(Feature.Dashboard) && <BuyLicenseAlertBox />}\r\n      </ModalContent>\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}