{"version":3,"sources":["components/accessControl/accessControlTypeTags.tsx","components/accessControl/accessControlObjectTypeTags.tsx","components/accessControl/accessControls.tsx"],"names":["AccessControlTypeTags","props","tags","types","AccessControlTypes","Create","push","Delete","Edit","View","Execute","map","m","color","AccessControlObjectTypeTags","type","AccessControlObjectType","Script","Table","React","lazy","EditModal","DeleteButton","AccessControlModal","AccessControls","t","useTranslation","useQuery","enabled","accessControls","data","isLoading","refetch","columns","key","title","dataIndex","render","value","record","tag","objectId","objectType","width","text","Modal","allowedWithOneWayGitSync","resource","subTitle","extra","url","actions","loading","queryFn"],"mappings":"6RAOe,SAASA,EAAsBC,GAC1C,IAAIC,EAAO,GAiBX,OAhBKD,EAAME,MAAQC,IAAmBC,UAAYD,IAAmBC,QACjEH,EAAKI,KAAK,WAETL,EAAME,MAAQC,IAAmBG,UAAYH,IAAmBG,QACjEL,EAAKI,KAAK,WAETL,EAAME,MAAQC,IAAmBI,QAAUJ,IAAmBI,MAC/DN,EAAKI,KAAK,SAETL,EAAME,MAAQC,IAAmBK,QAAUL,IAAmBK,MAC/DP,EAAKI,KAAK,SAETL,EAAME,MAAQC,IAAmBM,WAAaN,IAAmBM,SAClER,EAAKI,KAAK,WAGP,mCACFJ,EAAKS,KAAI,SAAAC,GAAC,OAAI,cAAC,IAAD,CAAaC,MAAM,OAAnB,SACVD,GADoBA,QCnBlB,SAASE,EAA4Bb,GAChD,IAAIC,EAAO,GAKX,OAJID,EAAMc,OAASC,IAAwBC,QACvCf,EAAKI,KAAK,UAGP,mCACFJ,EAAKS,KAAI,SAAAC,GAAC,OAAI,cAAC,IAAD,CAAaC,MAAM,OAAnB,SACVD,GADoBA,Q,sBCL3BM,EAAQC,IAAMC,MAAK,kBAAM,4CACzBC,EAAYF,IAAMC,MAAK,kBAAM,iCAC7BE,EAAeH,IAAMC,MAAK,kBAAM,4CAChCG,EAAqBJ,IAAMC,MAAK,kBAAM,mCAE7B,SAASI,IAAkB,IAC9BC,EAAMC,cAAND,EAD6B,EAGgBE,YACjD,iBACA,CAAEC,SAAS,IAFDC,EAHuB,EAG7BC,KAAsBC,EAHO,EAGPA,UAAWC,EAHJ,EAGIA,QAKnCC,EAA0C,CAC5C,CACIC,IAAK,cACLC,MAAOV,EAAE,mCACTW,UAAW,cACXC,OAAQ,SAACC,EAAOC,GACZ,OAAOA,EAAOC,IAAM,MAAQD,EAAOE,SAAW,WAAa,WAGnE,CACIP,IAAK,WACLC,MAAOV,EAAE,0BACTW,UAAW,YAEf,CACIF,IAAK,aACLC,MAAOV,EAAE,4BACTW,UAAW,aACXC,OAAQ,SAACC,EAAOC,GACZ,OAAO,cAACzB,EAAD,CAA6BC,KAAI,OAAEwB,QAAF,IAAEA,OAAF,EAAEA,EAAQG,eAG1D,CACIR,IAAK,MACLC,MAAOV,EAAE,cACTW,UAAW,OAEf,CACIF,IAAK,OACLC,MAAOV,EAAE,eACTW,UAAW,QAEf,CACIF,IAAK,OACLC,MAAOV,EAAE,4BACTW,UAAW,OACXC,OAAQ,SAACC,EAAOC,GACZ,OAAO,cAACvC,EAAD,CAAuBG,MAAK,OAAEoC,QAAF,IAAEA,OAAF,EAAEA,EAAQxB,SAGrD,CACI4B,MAAO,cACPP,UAAW,UACXC,OAAQ,SAACO,EAAML,GACX,OACI,eAAC,IAAD,WACI,cAACM,EAAA,EAAD,UACI,cAACxB,EAAD,CAAWkB,OAAQA,EAAQO,0BAA0B,MAEzD,cAACxB,EAAD,CAAcyB,SAAUR,EAAQO,0BAA0B,UAO9E,OACI,cAAC,IAAD,CAAYX,MAAOV,EAAE,2BAA4BuB,SAAUvB,EAAE,iCAAkCwB,MAAO,CAClG,cAAC,IAAD,CAAYC,IAAI,qCADpB,SAGI,cAAChC,EAAD,CACIiB,MAAOV,EAAE,2BACT0B,QAAS,CACL,cAACN,EAAA,EAAD,UACI,cAACtB,EAAD,OAGRU,QAASA,EACTmB,QAASrB,EACTD,KAAMD,EACNwB,QAASrB","file":"static/js/68.f7ef03fb.chunk.js","sourcesContent":["import { Tag } from \"antd\";\r\nimport { AccessControlTypes } from \"types\";\r\n\r\nexport interface AccessControlTypeTagsProps {\r\n    types: AccessControlTypes\r\n}\r\n\r\nexport default function AccessControlTypeTags(props: AccessControlTypeTagsProps): JSX.Element {\r\n    let tags = [];\r\n    if ((props.types & AccessControlTypes.Create) === AccessControlTypes.Create) {\r\n        tags.push('Create');\r\n    }\r\n    if ((props.types & AccessControlTypes.Delete) === AccessControlTypes.Delete) {\r\n        tags.push('Delete');\r\n    }\r\n    if ((props.types & AccessControlTypes.Edit) === AccessControlTypes.Edit) {\r\n        tags.push('Edit');\r\n    }\r\n    if ((props.types & AccessControlTypes.View) === AccessControlTypes.View) {\r\n        tags.push('View');\r\n    }\r\n    if ((props.types & AccessControlTypes.Execute) === AccessControlTypes.Execute) {\r\n        tags.push('Execute');\r\n    }\r\n\r\n    return <>\r\n        {tags.map(m => <Tag key={m} color=\"blue\">\r\n            {m}\r\n        </Tag>)}</>\r\n}\r\n\r\n","import { Tag } from \"antd\";\r\nimport { AccessControlObjectType } from \"types\";\r\n\r\nexport interface AccessControlObjectTypeTagsProps {\r\n    type: AccessControlObjectType\r\n}\r\n\r\nexport default function AccessControlObjectTypeTags(props: AccessControlObjectTypeTagsProps): JSX.Element {\r\n    let tags = [];\r\n    if (props.type === AccessControlObjectType.Script) {\r\n        tags.push('Script');\r\n    }\r\n\r\n    return <>\r\n        {tags.map(m => <Tag key={m} color=\"blue\">\r\n            {m}\r\n        </Tag>)}</>\r\n}\r\n\r\n","import React from \"react\";\r\nimport { PageHeader, Space } from \"antd\";\r\nimport { AccessControl, CustomColumns } from \"../../types\";\r\nimport { useQuery } from \"react-query3\";\r\nimport { Modal } from \"components/ui/Modal\";\r\nimport AccessControlTypeTags from \"./accessControlTypeTags\";\r\nimport AccessControlObjectTypeTags from \"./accessControlObjectTypeTags\";\r\nimport DocsButton from \"components/docsButton\";\r\nimport { useTranslation } from \"react-i18next\";\r\nconst Table = React.lazy(() => import(\"components/ui/Table\"));\r\nconst EditModal = React.lazy(() => import(\"components/ui/EditModal\"));\r\nconst DeleteButton = React.lazy(() => import(\"components/ui/DeleteButton\"));\r\nconst AccessControlModal = React.lazy(() => import(\"./accessControlModal\"));\r\n\r\nexport default function AccessControls() {\r\n    const { t } = useTranslation();\r\n\r\n    const { data: accessControls, isLoading, refetch } = useQuery<AccessControl[]>(\r\n        \"/accessControl\",\r\n        { enabled: false }\r\n    );\r\n\r\n    const columns: CustomColumns<AccessControl>[] = [\r\n        {\r\n            key: \"controlType\",\r\n            title: t('accessControl.accessControlType'),\r\n            dataIndex: \"controlType\",\r\n            render: (value, record) => {\r\n                return record.tag ? \"Tag\" : record.objectId ? \"Resource\" : \"Global\"\r\n            }\r\n        },\r\n        {\r\n            key: \"objectId\",\r\n            title: t('accessControl.objectId'),\r\n            dataIndex: \"objectId\",\r\n        },\r\n        {\r\n            key: \"objectType\",\r\n            title: t('accessControl.objectType'),\r\n            dataIndex: \"objectType\",\r\n            render: (value, record) => {\r\n                return <AccessControlObjectTypeTags type={record?.objectType} />\r\n            }\r\n        },\r\n        {\r\n            key: \"tag\",\r\n            title: t('common.tag'),\r\n            dataIndex: \"tag\",\r\n        },\r\n        {\r\n            key: \"role\",\r\n            title: t('common.role'),\r\n            dataIndex: \"role\",\r\n        },\r\n        {\r\n            key: \"type\",\r\n            title: t('accessControl.accessType'),\r\n            dataIndex: \"type\",\r\n            render: (value, record) => {\r\n                return <AccessControlTypeTags types={record?.type} />\r\n            }\r\n        },\r\n        {\r\n            width: \"fit-content\",\r\n            dataIndex: \"actions\",\r\n            render: (text, record) => {\r\n                return (\r\n                    <Space>\r\n                        <Modal>\r\n                            <EditModal record={record} allowedWithOneWayGitSync={false} />\r\n                        </Modal>\r\n                        <DeleteButton resource={record} allowedWithOneWayGitSync={false} />\r\n                    </Space>\r\n                );\r\n            },\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <PageHeader title={t('accessControl.pageTitle')} subTitle={t('accessControl.pageDescription')} extra={[\r\n            <DocsButton url=\"config/security/access-controls\" />\r\n        ]}>\r\n            <Table\r\n                title={t('accessControl.pageTitle')}\r\n                actions={[\r\n                    <Modal>\r\n                        <AccessControlModal />\r\n                    </Modal>,\r\n                ]}\r\n                columns={columns}\r\n                loading={isLoading}\r\n                data={accessControls}\r\n                queryFn={refetch}\r\n            />\r\n        </PageHeader>\r\n\r\n    );\r\n}\r\n"],"sourceRoot":""}