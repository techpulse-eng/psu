{"version":3,"sources":["components/git/GitDiffModal.tsx","components/git/GitStatusTable.tsx","components/git/GitModal.tsx","components/git/Git.tsx"],"names":["GitDiff","sha","path","useQuery","data","isLoading","original","item1","modified","item2","height","gitChangeColumns","title","dataIndex","key","render","value","record","setGitChangeIcon","type","GitChangeTable","commitId","dataSource","columns","loading","expandable","expandedRowRender","rowExpandable","GitChangeType","Modified","text","setGitStatusIcon","result","formatDate","timestamp","GitStatusTable","filter","m","changes","map","id","UpdateGitSettingsModal","initialValues","useModalContext","onOk","form","Modal","requiredRoles","requiredAccessControls","AccessControlTypes","Create","allowedWithOneWayGitSync","children","onClickOk","formName","Form","schemaName","name","preserve","Git","modeTag","gitStatusLoading","refetch","settings","useState","syncing","setSyncing","subTitle","extra","url","syncBehavior","GitSyncBehavior","TwoWay","color","OneWay","PushOnly","syncNow","a","axios","get","lastSync","lastSyncTime","dayjs","to","toString","HistoryOutlined","icon","ReloadOutlined","onClick","tags","direction","style","width","Text","strong","code","remote"],"mappings":"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","file":"static/js/85.241857bb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Spin } from \"antd\";\r\nimport { DiffEditor } from \"@monaco-editor/react\";\r\nimport { useQuery } from \"react-query3\";\r\n\r\nexport default function GitDiff({ sha, path }) {\r\n    const { data, isLoading } = useQuery<any>(`/gitstatus/diff/${sha}/${path}`);\r\n\r\n    if (isLoading) return <Spin />\r\n\r\n    return (<DiffEditor original={data?.item1} modified={data?.item2} height={300} />)\r\n}\r\n","import React from \"react\";\r\nimport { useQuery } from \"react-query3\";\r\nimport { CustomColumns, GitChange, GitChangeType, GitStatus } from \"types\";\r\nimport { formatDate, setGitChangeIcon, setGitStatusIcon } from \"components/utils/utils\";\r\nimport { Table } from 'antd';\r\nimport GitDiff from \"./GitDiffModal\";\r\n//import Table from \"components/ui/Table\";\r\n\r\nconst gitChangeColumns: CustomColumns<GitChange>[] = [\r\n  {\r\n    title: \"Path\",\r\n    dataIndex: \"path\",\r\n    key: \"path\",\r\n  },\r\n  {\r\n    title: \"Type\",\r\n    dataIndex: \"type\",\r\n    key: \"type\",\r\n    render: (value, record) => {\r\n      return setGitChangeIcon(record.type);\r\n    }\r\n  },\r\n]\r\n\r\nconst GitChangeTable = ({ commitId }) => {\r\n  const { data, isLoading } = useQuery<GitChange[]>(`/gitStatus/${commitId}`);\r\n  return <Table dataSource={data} columns={gitChangeColumns} loading={isLoading}\r\n    expandable={{\r\n      expandedRowRender: record => <GitDiff sha={record.commitId} path={record.path} />,\r\n      rowExpandable: (record) => record.type === GitChangeType.Modified,\r\n    }} />\r\n}\r\n\r\nconst columns: CustomColumns<GitStatus>[] = [\r\n  {\r\n    title: \"Id\",\r\n    dataIndex: \"id\",\r\n    key: \"id\",\r\n  },\r\n  {\r\n    title: \"Result\",\r\n    key: \"result\",\r\n    render: (text, record) => setGitStatusIcon(record.result),\r\n  },\r\n  {\r\n    title: \"Result Message\",\r\n    dataIndex: \"resultMessage\",\r\n    key: \"resultMessage\",\r\n  },\r\n  {\r\n    title: \"Timestamp\",\r\n    dataIndex: \"timestamp\",\r\n    key: \"timestamp\",\r\n    render: (text, record) => formatDate(record?.timestamp),\r\n  },\r\n];\r\n\r\nexport default function GitStatusTable({ data, isLoading }) {\r\n  return (\r\n    <Table\r\n      dataSource={data?.filter(m => m.changes !== 0).map(m => {\r\n        return {\r\n          ...m,\r\n          key: m.id\r\n        }\r\n      })}\r\n      columns={columns}\r\n      loading={isLoading}\r\n      expandable={{\r\n        expandedRowRender: record => <GitChangeTable commitId={record.commitId} />,\r\n        rowExpandable: () => true,\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport { AccessControlTypes, GitSettings } from \"../../types\";\r\nimport { Button } from \"antd\";\r\nimport {\r\n    ModalContent,\r\n    ModalOpenButton,\r\n    useModalContext,\r\n} from \"components/ui/Modal\";\r\nimport { Form, FormContentBase } from \"components/ui/Form/Form\";\r\n\r\nexport default function UpdateGitSettingsModal({ initialValues }) {\r\n    const { onOk, form } = useModalContext();\r\n\r\n    function handleOk() {\r\n        onOk(\"/git/settings\", \"create\", {} as GitSettings);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <ModalOpenButton requiredRoles={[\"Administrator\"]} requiredAccessControls={AccessControlTypes.Create} allowedWithOneWayGitSync={true}>\r\n                <Button children=\"Git Settings\" />\r\n            </ModalOpenButton>\r\n            <ModalContent title=\"Git Settings\" onClickOk={handleOk} formName=\"update_git_settings_form\">\r\n                <Form schemaName=\"gitSettings\">\r\n                    <FormContentBase\r\n                        initialValues={initialValues}\r\n                        name=\"update_git_settings_form\"\r\n                        form={form}\r\n                        preserve={false}\r\n                    />\r\n                </Form>\r\n            </ModalContent>\r\n        </Fragment>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { PageHeader, Result, Spin, Tag, Tooltip, Typography, Space, Button } from \"antd\";\r\nimport GitStatusTable from \"./GitStatusTable\";\r\nimport { useQuery } from \"react-query3\";\r\nimport { GitSettings, GitStatus, GitSyncBehavior } from './../../types';\r\nimport DocsButton from \"components/docsButton\";\r\nimport UpdateGitSettingsModal from \"./GitModal\";\r\nimport { Modal } from \"components/ui/Modal\";\r\nimport { HistoryOutlined, ReloadOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\nimport dayjs from \"dayjs\";\r\n\r\nexport default function Git() {\r\n\r\n    const { data, isLoading: gitStatusLoading, refetch } = useQuery<GitStatus[]>(\"/gitStatus\");\r\n    const { data: settings, isLoading } = useQuery<GitSettings>(\"/git/settings\");\r\n    const [syncing, setSyncing] = useState(false);\r\n\r\n    if (!settings) {\r\n        return <Result title=\"Git synchronization is disabled\" subTitle=\"You can configure git settings below.\" extra={\r\n            [\r\n                <Space>\r\n                    <Modal>\r\n                        <UpdateGitSettingsModal initialValues={null} />\r\n                    </Modal>\r\n                    <DocsButton url=\"config/git\" />\r\n                </Space>\r\n            ]\r\n        } />\r\n    }\r\n\r\n    if (isLoading) {\r\n        return <Spin />;\r\n    }\r\n\r\n    let modeTag;\r\n    if (settings.syncBehavior === GitSyncBehavior.TwoWay) {\r\n        modeTag = <Tooltip title=\"PowerShell Universal is pushing and pulling changes from git.\"><Tag color=\"blue\">Two-Way</Tag></Tooltip>;\r\n    }\r\n    else if (settings.syncBehavior === GitSyncBehavior.OneWay) {\r\n        modeTag = <Tooltip title=\"PowerShell Universal is running in read-only mode and pulling changes from git.\"><Tag color=\"blue\">One-Way</Tag></Tooltip>;\r\n    }\r\n    else if (settings.syncBehavior === GitSyncBehavior.PushOnly) {\r\n        modeTag = <Tooltip title=\"PowerShell Universal is pushing changes but will not pull changes.\"><Tag color=\"blue\">Push Only</Tag></Tooltip>;\r\n    }\r\n\r\n    const syncNow = async () => {\r\n        setSyncing(true);\r\n        await axios.get(\"/api/v1/git/sync\");\r\n        setSyncing(false);\r\n        refetch();\r\n    };\r\n\r\n    let lastSync = \"Never\";\r\n    let lastSyncTime = \"Never;\"\r\n    if (data) {\r\n        lastSync = dayjs().to(data[0].timestamp);\r\n        lastSyncTime = dayjs(data[0].timestamp).toString();\r\n    }\r\n\r\n    return (\r\n        <PageHeader title=\"Git\" subTitle=\"Git synchronization pulls and pushes to a remote repository.\"\r\n            extra={\r\n                [\r\n                    <Space>\r\n                        <Tooltip title={lastSyncTime}><HistoryOutlined /> {lastSync}</Tooltip>\r\n                        <Button icon={<ReloadOutlined />} loading={syncing} onClick={syncNow}>Synchronize Now</Button>\r\n                        <Modal>\r\n                            <UpdateGitSettingsModal initialValues={settings} />\r\n                        </Modal>\r\n                        <DocsButton url=\"config/git\" />\r\n                    </Space>\r\n\r\n                ]\r\n            }\r\n            tags={modeTag} >\r\n\r\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\r\n                <Space direction=\"horizontal\">\r\n                    <Space direction=\"horizontal\">\r\n                        <Typography.Text strong>Remote:</Typography.Text>\r\n                        <Typography.Text code>{settings.remote}</Typography.Text>\r\n                    </Space>\r\n                    <Space direction=\"horizontal\">\r\n                        <Typography.Text strong>Branch:</Typography.Text>\r\n                        <Typography.Text code>{settings.remote}</Typography.Text>\r\n                    </Space>\r\n                </Space>\r\n                <GitStatusTable data={data} isLoading={gitStatusLoading} />\r\n            </Space>\r\n\r\n        </PageHeader>\r\n\r\n    );\r\n}\r\n"],"sourceRoot":""}