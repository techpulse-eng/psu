{"version":3,"sources":["../../src/index.ts","components/api/components/variables-card.tsx"],"names":["parse","str","options","tokens","i","length","char","push","type","index","value","count","pattern","j","TypeError","name","code","charCodeAt","lexer","prefixes","defaultPattern","escapeString","delimiter","result","key","path","tryConsume","mustConsume","undefined","nextType","consumeText","prefix","indexOf","suffix","modifier","compile","reFlags","flags","encode","x","validate","matches","map","token","RegExp","data","optional","repeat","Array","isArray","segment","test","typeOfMessage","String","tokensToFunction","replace","sensitive","VariablesCard","Form","useForm","form","endpoint","usePageContext","resource","parts","find","part","isVariable","title","bordered","headStyle","borderBottom","style","minWidth","layout","onValuesChange","changedValues","values","variableName","Object","keys","variableValue","getFieldValue","queryClient","setQueryData","id","old","fullUrl","window","location","origin","url","encodeURIComponent","toPath","Item","label","capitalize","placeholder"],"mappings":"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","file":"static/js/73.8abfc77c.chunk.js","sourcesContent":["/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\" } = options;\n  const defaultPattern = `[^${escapeString(options.delimiter || \"/#?\")}]+?`;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    // tslint:disable-next-line\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || defaultPattern,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? defaultPattern : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {}\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map(token => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {}\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function(pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      // tslint:disable-next-line\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map(value => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\"\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n): RegExp {\n  const parts = paths.map(path => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {}\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x\n  } = options;\n  const endsWith = `[${escapeString(options.endsWith || \"\")}]|$`;\n  const delimiter = `[${escapeString(options.delimiter || \"/#?\")}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiter}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWith})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiter.indexOf(endToken[endToken.length - 1]) > -1\n        : // tslint:disable-next-line\n          endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiter}(?=${endsWith}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiter}|${endsWith})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n","import React from \"react\";\r\nimport { Card, Form, Input } from \"antd\";\r\nimport { compile } from \"path-to-regexp\";\r\nimport { Endpoint } from \"types\";\r\nimport { capitalize } from \"components/utils/utils\";\r\nimport { usePageContext } from \"components/pages/Page\";\r\nimport queryClient from \"components/utils/queryClient\";\r\n\r\nexport default function VariablesCard() {\r\n  const [form] = Form.useForm();\r\n  const { resource: endpoint } = usePageContext();\r\n\r\n  function generatePath(path) {\r\n    const baseUrl: string = endpoint?.url;\r\n    const toPath = compile(baseUrl, { encode: encodeURIComponent });\r\n    return toPath({ ...path });\r\n  }\r\n\r\n  function onValuesChange(changedValues, values) {\r\n    const variableName = Object.keys(changedValues)[0];\r\n    const variableValue = form.getFieldValue(variableName);\r\n    if (\r\n      variableValue === \"\" ||\r\n      variableValue === undefined ||\r\n      variableValue === null\r\n    ) {\r\n      changedValues[variableName] = `:${variableName}`;\r\n    }\r\n    queryClient.setQueryData(`/endpoint/${endpoint?.id}`, (old: Endpoint) => ({\r\n      ...old,\r\n      fullUrl: `${window.location.origin}${generatePath({\r\n        ...values,\r\n        ...changedValues,\r\n      })}`,\r\n    }));\r\n  }\r\n\r\n  return endpoint?.parts?.find((part) => part.isVariable) ? (\r\n    <Card\r\n      title=\"Variables\"\r\n      bordered={false}\r\n      headStyle={{ borderBottom: \"unset\" }}\r\n      style={{ minWidth: \"100%\" }}\r\n    >\r\n      <Form\r\n        form={form}\r\n        layout=\"vertical\"\r\n        onValuesChange={onValuesChange}\r\n        name=\"endpoint_variables_form\"\r\n      >\r\n        {endpoint?.parts?.map((part) =>\r\n          part.isVariable ? (\r\n            <Form.Item name={part.value} label={capitalize(part.value)}>\r\n              <Input placeholder={`Please enter ${capitalize(part.value)}`} />\r\n            </Form.Item>\r\n          ) : null\r\n        )}\r\n      </Form>\r\n    </Card>\r\n  ) : null;\r\n}\r\n"],"sourceRoot":""}