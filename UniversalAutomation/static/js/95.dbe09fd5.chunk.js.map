{"version":3,"sources":["components/protect/actionModal.tsx","components/protect/ruleModal.tsx","components/protect/protectConfig.tsx"],"names":["ActionModal","onSubmit","action","useState","actionModalOpen","setActionModalOpen","type","actionType","setActionType","Form","useForm","form","title","initialValues","settings","forEach","x","name","value","icon","EditOutlined","AppstoreAddOutlined","style","float","marginBottom","onClick","visible","onOk","validateFields","then","values","resetFields","Object","keys","key","push","catch","info","message","error","onCancel","width","labelAlign","labelCol","span","wrapperCol","Item","label","help","rules","required","onChange","e","toString","Option","min","max","indexOf","Text","href","target","rel","RuleModal","actions","rule","modalOpen","setModalOpen","conditions","setConditions","actionRefs","setActionRefs","setName","anyCondition","setAnyCondition","property","setProperty","operator","setOperator","setValue","closable","maskClosable","direction","checked","placeholder","dropdownMatchSelectWidth","FileAddFilled","dataSource","columns","dataIndex","mode","map","m","TabPane","Tabs","builtIns","displayName","ProtectConfigPage","id","useParams","useQuery","config","data","isLoading","setActions","setRules","license","setLicense","mutateAsync","useMutation","navigate","useNavigate","saving","setSaving","amsiBypass","InvokeExpression","ReflectionEmit","MarshalClass","Log4J","loggingBypass","AssemblyLoad","BloudHound","PersistentWmi","DisableDefender","Kerberoasting","PowerSploit","builtIn","setBuiltIn","a","resourceInfo","self","disabledConditions","filter","enabled","onSuccess","rest","success","queryClient","refetchQueries","exact","stale","editAction","newActions","editRule","newRules","useEffect","newBuiltIn","subTitle","description","extra","SaveFilled","onSave","loading","defaultActiveKey","tab","updateBuiltIn","render","record"],"mappings":"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","file":"static/js/95.dbe09fd5.chunk.js","sourcesContent":["import { AppstoreAddOutlined, EditOutlined } from \"@ant-design/icons\";\r\nimport { Button, Form, Modal, message, Input, Select, Typography } from \"antd\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function ActionModal({ onSubmit, action }) {\r\n    const [actionModalOpen, setActionModalOpen] = useState(false);\r\n    const [actionType, setActionType] = useState(action?.type);\r\n    const [form] = Form.useForm();\r\n\r\n    const addAction = () => {\r\n        form\r\n            .validateFields()\r\n            .then(values => {\r\n                form.resetFields();\r\n                const action = {\r\n                    name: values.name,\r\n                    type: values.type,\r\n                    settings: []\r\n                }\r\n\r\n                Object.keys(values).forEach(key => {\r\n                    action.settings.push({\r\n                        name: key,\r\n                        value: values[key]\r\n                    })\r\n                })\r\n\r\n                onSubmit(action);\r\n                setActionModalOpen(false);\r\n            })\r\n            .catch(info => {\r\n                message.error(info);\r\n            });\r\n    }\r\n\r\n    const formattable = [\"http\", \"eventLog\", \"file\", \"tcp\", \"udp\"];\r\n\r\n    let title = \"Add Action\";\r\n    if (action !== null) {\r\n        title = \"Edit Action\";\r\n    }\r\n\r\n    const initialValues = {};\r\n    if (action) {\r\n        action.settings.forEach(x => {\r\n            initialValues[x.name] = x.value\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button icon={action !== null ? <EditOutlined /> : <AppstoreAddOutlined />} style={{ float: 'right', marginBottom: '10px' }} onClick={() => setActionModalOpen(true)}>{title}</Button>\r\n            <Modal title={title} visible={actionModalOpen} onOk={addAction} onCancel={() => setActionModalOpen(false)} width=\"50%\">\r\n                <Form\r\n                    labelAlign=\"left\"\r\n                    labelCol={{ span: 4 }}\r\n                    wrapperCol={{ span: 14 }}\r\n                    form={form}\r\n                    name=\"form_in_modal\"\r\n                    initialValues={{\r\n                        ...action,\r\n                        ...initialValues\r\n                    }}\r\n                >\r\n                    <Form.Item\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        help=\"Select a name for this action. It will be used when referencing it in rules.\"\r\n                        rules={[{ required: true, message: 'Please input the name of the rule!' }]}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"type\"\r\n                        label=\"Type\"\r\n                        help=\"Select the type of action to take.\"\r\n                        rules={[{ required: true, message: 'Please input the type of the rule!' }]}\r\n                    >\r\n                        <Select onChange={e => setActionType(e.toString())}>\r\n                            <Select.Option value={\"block\"}>Block</Select.Option>\r\n                            <Select.Option value={\"eventLog\"}>Send to Event Log</Select.Option>\r\n                            <Select.Option value={\"file\"}>Send to File</Select.Option>\r\n                            <Select.Option value={\"http\"}>Send over HTTP</Select.Option>\r\n                            <Select.Option value={\"tcp\"}>Send over TCP</Select.Option>\r\n                            <Select.Option value={\"udp\"}>Send over UDP</Select.Option>\r\n                            <Select.Option value={\"universal\"}>Send to PowerShell Universal</Select.Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n                    {actionType === \"http\" && <Form.Item name=\"address\" label=\"Address\" help=\"The HTTP address to send the event to.\" rules={[{ required: true }]}><Input /></Form.Item>}\r\n                    {actionType === \"file\" && <Form.Item name=\"path\" label=\"Path\" help=\"The path to write the events to.\" rules={[{ required: true }]}><Input /></Form.Item>}\r\n                    {actionType === \"eventLog\" && <Form.Item name=\"entryType\" label=\"Entry Type\" help=\"The event log entry type.\" rules={[{ required: true }]}>\r\n                        <Select>\r\n                            <Select.Option value={\"Error\"}>Error</Select.Option>\r\n                            <Select.Option value={\"FailureAudit\"}>Failure Audit</Select.Option>\r\n                            <Select.Option value={\"Information\"}>Information</Select.Option>\r\n                            <Select.Option value={\"SuccessAudit\"}>Success Audit</Select.Option>\r\n                            <Select.Option value={\"Warning\"}>Warning</Select.Option>\r\n                        </Select>\r\n                    </Form.Item>}\r\n                    {(actionType === \"tcp\" || actionType === \"udp\") && <Form.Item name=\"hostname\" label=\"Host Name\" help=\"The host name of the machine to send the events to.\" rules={[{ required: true }]}><Input /></Form.Item>}\r\n                    {(actionType === \"tcp\" || actionType === \"udp\") && <Form.Item name=\"port\" label=\"Port\" help=\"The port to send the events to.\" rules={[{ required: true }]}><Input type={\"number\"} min={0} max={65556} /></Form.Item>}\r\n                    {actionType === \"universal\" && <Form.Item name=\"address\" label=\"Address\" help=\"The HTTP address of the PowerShell Universal server.\" rules={[{ required: true }]}><Input /></Form.Item>}\r\n                    {actionType === \"universal\" && <Form.Item name=\"appToken\" label=\"App Token\" help=\"An app token used to authenticate against PowerShell Universal.\" rules={[{ required: true }]}><Input /></Form.Item>}\r\n                    {formattable.indexOf(actionType) !== -1 && <Form.Item name=\"format\" label=\"Format\" rules={[{ required: true }]} help={<Typography.Text type=\"secondary\">The <a href=\"https://docs.poshtools.com/powershell-pro-tools-documentation/powershell-protect/actions#formatting-strings\" target=\"_blank\" rel=\"noreferrer\">format</a> of the message to send</Typography.Text>}><Input type=\"textarea\" /></Form.Item>}\r\n                </Form>\r\n            </Modal>\r\n        </>\r\n    )\r\n\r\n}","import { AppstoreAddOutlined, EditOutlined, FileAddFilled } from \"@ant-design/icons\";\r\nimport { Button, Modal, message, Input, Select, Typography, Checkbox, Table, Space } from \"antd\";\r\nimport { useState } from \"react\";\r\nimport { ProtectActionRef, ProtectCondition } from \"types\";\r\n\r\nexport default function RuleModal({ onSubmit, actions, rule }) {\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [conditions, setConditions] = useState<Array<ProtectCondition>>(rule?.conditions || []);\r\n    const [actionRefs, setActionRefs] = useState<Array<ProtectActionRef>>(rule?.actions || []);\r\n    const [name, setName] = useState(rule?.name);\r\n    const [anyCondition, setAnyCondition] = useState(rule?.anyCondition);\r\n    const [property, setProperty] = useState(\"\");\r\n    const [operator, setOperator] = useState(\"\");\r\n    const [value, setValue] = useState(\"\");\r\n\r\n    const addRule = () => {\r\n        if (!name || name === \"\") {\r\n            message.error(\"Name is required\");\r\n            return;\r\n        }\r\n\r\n        onSubmit({\r\n            name,\r\n            anyCondition,\r\n            actions: actionRefs,\r\n            conditions\r\n        })\r\n\r\n        setModalOpen(false);\r\n        setName('');\r\n        setActionRefs([]);\r\n        setConditions([]);\r\n    }\r\n\r\n    const addCondition = () => {\r\n        if (!value || value === '') {\r\n            message.error(\"Value is required\");\r\n            return;\r\n        }\r\n\r\n        if (!operator || operator === '') {\r\n            message.error(\"Operator is required\");\r\n            return;\r\n        }\r\n\r\n        setConditions([\r\n            ...conditions,\r\n            {\r\n                property,\r\n                operator,\r\n                value\r\n            }\r\n        ])\r\n\r\n        setOperator(\"equals\");\r\n        setValue(\"\");\r\n    }\r\n\r\n    let title = \"Add Rule\";\r\n    if (rule !== null) {\r\n        title = \"Edit Rule\";\r\n    }\r\n\r\n    const handleChange = (value: string[]) => {\r\n        setActionRefs(value.map(x => { return { name: x } }));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button icon={rule !== null ? <EditOutlined /> : <AppstoreAddOutlined />} style={{ float: 'right', marginBottom: '10px' }} onClick={() => setModalOpen(true)}>{title}</Button>\r\n            <Modal title={title} visible={modalOpen} onOk={addRule} onCancel={() => setModalOpen(false)} width=\"50%\" closable={false} maskClosable={false}>\r\n                <Space direction=\"vertical\" style={{ width: '100%' }}>\r\n                    <Typography>Name</Typography>\r\n                    <Input value={name} onChange={e => setName(e.target.value)}></Input>\r\n                    <Checkbox checked={anyCondition} onChange={e => setAnyCondition(e.target.checked)}>Any Condition</Checkbox>\r\n                    <Typography.Text type=\"secondary\">When checked, this rule will trigger when any condition is met.</Typography.Text>\r\n                    <Typography>Conditions</Typography>\r\n                    <Typography.Text type=\"secondary\">The conditions that need to match for this rule to trigger. By default, all conditions must be met in order for the actions to trigger.</Typography.Text>\r\n\r\n                    <Space direction=\"horizontal\" style={{ width: '100%' }}>\r\n                        <Select placeholder=\"Select field...\" dropdownMatchSelectWidth={false} onChange={e => setProperty(e.toString())} value={property}>\r\n                            <Select.Option value=\"admin\">Administrator</Select.Option>\r\n                            <Select.Option value=\"ApplicationName\">Application Name</Select.Option>\r\n                            <Select.Option value=\"ApplicationHash\">Application Hash</Select.Option>\r\n                            <Select.Option value=\"Assembly\">Assembly Name</Select.Option>\r\n                            <Select.Option value=\"AssemblyHash\">Assembly Hash</Select.Option>\r\n                            <Select.Option value=\"Command\">Command</Select.Option>\r\n                            <Select.Option value=\"computername\">Computer Name</Select.Option>\r\n                            <Select.Option value=\"contentpath\">Content Path</Select.Option>\r\n                            <Select.Option value=\"domain\">Domain</Select.Option>\r\n                            <Select.Option value=\"domaincontroller\">Domain Controller</Select.Option>\r\n                            <Select.Option value=\"member\">Member</Select.Option>\r\n                            <Select.Option value=\"script\">Script Content</Select.Option>\r\n                            <Select.Option value=\"string\">Strings</Select.Option>\r\n                            <Select.Option value=\"variables\">Variables</Select.Option>\r\n                        </Select>\r\n                        <Select placeholder=\"Select a condition...\" dropdownMatchSelectWidth={false} onChange={e => setOperator(e.toString())} value={operator}>\r\n                            <Select.Option value=\"startswith\">Starts With</Select.Option>\r\n                            <Select.Option value=\"notstartswith\">Does Not Start With</Select.Option>\r\n                            <Select.Option value=\"endswith\">Ends With</Select.Option>\r\n                            <Select.Option value=\"notendswith\">Does Not End With</Select.Option>\r\n                            <Select.Option value=\"equals\">Equals</Select.Option>\r\n                            <Select.Option value=\"notequals\">Does Not Equal</Select.Option>\r\n                            <Select.Option value=\"contains\">Contains</Select.Option>\r\n                            <Select.Option value=\"notcontains\">Does Not Contain</Select.Option>\r\n                            <Select.Option value=\"matches\">Matches RegEx</Select.Option>\r\n                        </Select>\r\n                        <Input placeholder=\"Enter value...\" onChange={e => setValue(e.target.value)} value={value}></Input>\r\n                        <Button icon={<FileAddFilled />} onClick={addCondition}></Button>\r\n                    </Space>\r\n                    <Table dataSource={conditions} columns={[\r\n                        {\r\n                            dataIndex: 'property',\r\n                            title: \"Property\"\r\n                        },\r\n                        {\r\n                            dataIndex: 'operator',\r\n                            title: \"Operator\"\r\n                        },\r\n                        {\r\n                            dataIndex: 'value',\r\n                            title: \"Value\"\r\n                        }\r\n                    ]}>\r\n\r\n                    </Table>\r\n                    <Typography>Actions</Typography>\r\n                    <Typography.Text type=\"secondary\">The actions to execute when this rule is matched.</Typography.Text>\r\n                    <Select mode=\"multiple\" style={{ width: '100%' }} onChange={handleChange} value={actionRefs.map(m => m.name)}>\r\n                        {actions.map(x => <Select.Option value={x}>{x}</Select.Option>)}\r\n                    </Select>\r\n                </Space>\r\n            </Modal>\r\n        </>\r\n    )\r\n\r\n}","import \"../../Tables.module.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { ProtectAction, ProtectActionRef, ProtectConfiguration, ProtectRule } from \"types\";\r\nimport { useQuery } from \"react-query3\";\r\nimport { Button, Card, Checkbox, Input, message, PageHeader, Select, Space, Table, Tabs, Typography } from \"antd\";\r\nimport ActionModal from \"./actionModal\";\r\nimport RuleModal from \"./ruleModal\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport queryClient, { useMutation } from \"components/utils/queryClient\";\r\nconst { TabPane } = Tabs;\r\n\r\nconst builtIns = [\r\n    {\r\n        name: \"amsiBypass\",\r\n        displayName: 'AMSI Bypass Detection'\r\n    },\r\n    {\r\n        name: \"InvokeExpression\",\r\n        displayName: 'Disable use of Invoke-Expression'\r\n    },\r\n    {\r\n        name: \"ReflectionEmit\",\r\n        displayName: \"Disable use of the System.Reflection.Emit Namespace\"\r\n    },\r\n    {\r\n        name: \"MarshalClass\",\r\n        displayName: 'Disable use of the Marshal Class'\r\n    },\r\n    {\r\n        name: 'Log4J',\r\n        displayName: 'Log4J CVE-2021-44228 (Log4Shell) Detection'\r\n    },\r\n    {\r\n        name: 'loggingBypass',\r\n        displayName: 'Module and Script Block Logging Bypass Protection'\r\n    },\r\n    {\r\n        name: 'AssemblyLoad',\r\n        displayName: 'Prevent Assembly Load from Memory'\r\n    },\r\n    {\r\n        name: 'BloudHound',\r\n        displayName: 'Prevent BloodHound Injestor Execution'\r\n    },\r\n    {\r\n        name: 'PersistentWmi',\r\n        displayName: 'Prevent Creation of Persistent WMI Event Subscriptions'\r\n    },\r\n    {\r\n        name: 'DisableDefender',\r\n        displayName: 'Prevent Disabling Defender'\r\n    },\r\n    {\r\n        name: 'Kerberoasting',\r\n        displayName: 'Prevent Kerberoasting'\r\n    },\r\n    {\r\n        name: 'PowerSploit',\r\n        displayName: 'Prevent the use of PowerSploit'\r\n    }\r\n]\r\n\r\nexport default function ProtectConfigPage() {\r\n    const { id } = useParams();\r\n    const { data: config, isLoading } = useQuery<ProtectConfiguration>(`/protect/config/${id}`);\r\n    const [actions, setActions] = useState<Array<ProtectAction>>([]);\r\n    const [rules, setRules] = useState<Array<ProtectRule>>([]);\r\n    const [license, setLicense] = useState('');\r\n    const { mutateAsync } = useMutation<ProtectConfiguration>();\r\n    const navigate = useNavigate();\r\n    const [saving, setSaving] = useState(false);\r\n    const [actionRefs, setActionRefs] = useState<Array<ProtectActionRef>>([]);\r\n\r\n    const [builtIn, setBuiltIn] = useState({\r\n        amsiBypass: true,\r\n        InvokeExpression: true,\r\n        ReflectionEmit: true,\r\n        MarshalClass: true,\r\n        Log4J: true,\r\n        loggingBypass: true,\r\n        AssemblyLoad: true,\r\n        BloudHound: true,\r\n        PersistentWmi: true,\r\n        DisableDefender: true,\r\n        Kerberoasting: true,\r\n        PowerSploit: true\r\n    })\r\n\r\n    const updateBuiltIn = (name: string, value: boolean) => {\r\n        const newBuiltIn = { ...builtIn };\r\n        newBuiltIn[name] = value;\r\n\r\n        setBuiltIn(newBuiltIn)\r\n    }\r\n\r\n    async function onSave() {\r\n        setSaving(true);\r\n        await mutateAsync({\r\n            key: config?.resourceInfo?.self,\r\n            action: \"update\",\r\n            ...config,\r\n            actions,\r\n            rules,\r\n            license,\r\n            builtIn: {\r\n                actions: actionRefs,\r\n                disabledConditions: Object.keys(builtIn).filter(m => !builtIn[m]),\r\n                enabled: true\r\n            }\r\n        }\r\n            , {\r\n                onSuccess: (data, { key, action, ...rest }) => {\r\n                    setSaving(false);\r\n                    message.success(\"Configuration saved\");\r\n                    queryClient.refetchQueries(`/protect/config/${rest?.id}`, {\r\n                        exact: true,\r\n                        stale: true,\r\n                    });\r\n                    navigate(\"/admin/security/protect\");\r\n                },\r\n            });\r\n    }\r\n\r\n    const addAction = (action: ProtectAction) => {\r\n        setActions([\r\n            ...actions,\r\n            action\r\n        ])\r\n    }\r\n\r\n\r\n    const addRule = (rule: ProtectRule) => {\r\n        setRules([\r\n            ...rules,\r\n            rule\r\n        ])\r\n    }\r\n\r\n    const editAction = (action: ProtectAction) => {\r\n        var newActions = actions.filter(x => x.name !== action.name);\r\n        setActions([\r\n            ...newActions,\r\n            action\r\n        ])\r\n    }\r\n\r\n    const editRule = (rule: ProtectRule) => {\r\n        var newRules = rules.filter(x => x.name !== rule.name);\r\n        setRules([\r\n            ...newRules,\r\n            rule\r\n        ])\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isLoading) {\r\n            setActions(config.actions);\r\n            setRules(config.rules);\r\n            setActionRefs(config.builtIn.actions);\r\n            setLicense(config.license);\r\n            const newBuiltIn = { ...builtIn };\r\n            config.builtIn.disabledConditions.forEach(x => {\r\n                newBuiltIn[x] = false;\r\n            })\r\n            setBuiltIn(newBuiltIn);\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n    }, [config, isLoading, setBuiltIn])\r\n\r\n    const handleChange = (value: string[]) => {\r\n        setActionRefs(value.map(x => { return { name: x } }));\r\n    };\r\n\r\n    return (\r\n        <PageHeader title={config?.name} subTitle={config?.description} extra={[\r\n            <Button icon={<SaveFilled />} type=\"primary\" onClick={() => onSave()} loading={saving}>Save</Button>\r\n        ]}>\r\n            <Card>\r\n                <Tabs defaultActiveKey=\"1\">\r\n                    <TabPane tab=\"Default Rules\" key=\"1\">\r\n                        <Space direction=\"vertical\">\r\n                            <Typography>Default Rules</Typography>\r\n                            <Typography.Text type=\"secondary\">Enable or disable default rules below. Learn more about the default rules on the <a target=\"_blank\" href=\"https://docs.poshtools.com/powershell-pro-tools-documentation/powershell-protect/rules#default-rules\" rel=\"noreferrer\">PowerShell Protect documentation</a>.</Typography.Text>\r\n                            {builtIns.map(x => <Checkbox checked={builtIn[x.name]} onChange={e => updateBuiltIn(x.name, e.target.checked)}>{x.displayName}</Checkbox>)}\r\n                            <Typography>Additional Actions</Typography>\r\n                            <Typography.Text type=\"secondary\">The additional actions to execute when one of the default rules is matched.</Typography.Text>\r\n                            <Select mode=\"multiple\" style={{ width: '100%' }} onChange={handleChange} value={actionRefs.map(m => m.name)}>\r\n                                {actions.map(x => <Select.Option value={x.name}>{x.name}</Select.Option>)}\r\n                            </Select>\r\n                        </Space>\r\n                    </TabPane>\r\n                    <TabPane tab=\"Custom Rules\" key=\"2\">\r\n                        <Typography style={{ float: 'left', marginBottom: '10px' }}>Custom rules contain configurable conditions and actions.</Typography>\r\n                        <RuleModal onSubmit={addRule} rule={null} actions={actions.map(m => m.name)} />\r\n                        <Table\r\n                            dataSource={rules}\r\n                            columns={[\r\n                                {\r\n                                    key: \"name\",\r\n                                    title: \"Name\",\r\n                                    dataIndex: \"name\"\r\n                                },\r\n                                {\r\n                                    key: 'actions',\r\n                                    render: (value, record) => {\r\n                                        return <RuleModal onSubmit={editRule} rule={record} actions={actions.map(m => m.name)} />\r\n                                    }\r\n                                }\r\n                            ]}\r\n                        >\r\n                        </Table>\r\n                    </TabPane>\r\n                    <TabPane tab=\"Actions\" key=\"3\">\r\n                        <Typography style={{ float: 'left', marginBottom: '10px' }}>Actions that can be assigned to rules.</Typography>\r\n                        <ActionModal onSubmit={addAction} action={null} />\r\n                        <Table\r\n                            dataSource={actions}\r\n                            columns={[\r\n                                {\r\n                                    key: \"name\",\r\n                                    title: \"Name\",\r\n                                    dataIndex: \"name\"\r\n                                },\r\n                                {\r\n                                    key: \"type\",\r\n                                    title: \"Type\",\r\n                                    dataIndex: 'type'\r\n                                },\r\n                                {\r\n                                    key: 'actions',\r\n                                    render: (value, record) => {\r\n                                        return <ActionModal onSubmit={editAction} action={record} />\r\n                                    }\r\n                                }\r\n                            ]}\r\n                        >\r\n                        </Table>\r\n                    </TabPane>\r\n                    <TabPane tab=\"License\" key=\"4\">\r\n                        <Typography style={{ float: 'left', marginBottom: '10px' }}>PowerShell Protect requires a <a href=\"https://ironmansoftware.com/pricing/powershell-pro-tools\" target=\"_blank\" rel=\"noreferrer\">PowerShell Pro Tools</a> license.</Typography>\r\n                        <Input type=\"textarea\" value={license} onChange={e => setLicense(e.target.value)}></Input>\r\n                    </TabPane>\r\n                </Tabs>\r\n            </Card>\r\n\r\n        </PageHeader>\r\n    );\r\n}\r\n"],"sourceRoot":""}