{"version":3,"sources":["components/debugging/debugTerminal.tsx","components/debugging/debugger.tsx"],"names":["fitAddon","FitAddon","searchAddon","SearchAddon","webLinksAddon","WebLinksAddon","DebugTerminal","processId","runspaceId","refetch","xtermRef","React","useRef","xtermCommandRef","useEffect","termRefVar","current","fit","terminal","write","onCommand","command","a","axios","put","type","DebugActionType","Command","result","data","output","writePrompt","then","i","length","trimEnd","onKey","key","toLocaleLowerCase","clear","writeln","substr","dispose","className","ref","addons","options","cursorBlink","Debugger","useParams","useState","running","setRunning","useQuery","onSuccess","onError","isLoading","disabled","setDisabled","SetDebugAction","method","url","response","title","subTitle","tags","color","PlayCircleOutlined","direction","style","width","icon","onClick","Continue","ArrowRightOutlined","StepOver","ArrowDownOutlined","StepInto","ArrowUpOutlined","StepOut"],"mappings":"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","file":"static/js/84.a3dbbd84.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { WebLinksAddon } from \"xterm-addon-web-links\";\r\nimport { FitAddon } from \"xterm-addon-fit\";\r\nimport { SearchAddon } from \"xterm-addon-search\";\r\nimport { XTerm } from \"xterm-for-react\";\r\nimport axios from \"axios\";\r\nimport { DebugActionType } from \"../../types\";\r\n\r\nconst fitAddon = new FitAddon();\r\nconst searchAddon = new SearchAddon();\r\nconst webLinksAddon = new WebLinksAddon();\r\n\r\nconst DebugTerminal = ({ processId, runspaceId, refetch }) => {\r\n    const xtermRef = React.useRef<XTerm>(null);\r\n    const xtermCommandRef = React.useRef<string>(\"\");\r\n\r\n    useEffect(() => {\r\n        let termRefVar = xtermRef.current;\r\n        fitAddon.fit();\r\n        xtermRef.current.terminal.write(\"PowerShell Universal Debugger\\r\\n\");\r\n\r\n        const terminal = xtermRef.current.terminal;\r\n\r\n        const onCommand = async (command) => {\r\n            var result = await axios.put(`/api/v1/debugger/breakpoint/${processId}/${runspaceId}`, {\r\n                type: DebugActionType.Command,\r\n                command\r\n            });\r\n\r\n            refetch();\r\n\r\n            return result.data.output;\r\n        };\r\n\r\n        const writePrompt = () => {\r\n            onCommand(\"prompt\").then(data => {\r\n                if (!data) return;\r\n\r\n                for (let i = 0; i < data.length; i++) {\r\n                    terminal.write('\\b \\b');\r\n                }\r\n\r\n                terminal.write(data.trimEnd());\r\n            });\r\n        }\r\n\r\n        xtermRef.current.terminal.onKey((key) => {\r\n            if (key.key === \"\\r\") {\r\n                if (xtermCommandRef.current.toLocaleLowerCase() === \"cls\" || xtermCommandRef.current.toLocaleLowerCase() === \"clear-host\") {\r\n                    terminal.clear();\r\n                    writePrompt();\r\n                    xtermCommandRef.current = \"\";\r\n                    return;\r\n                }\r\n\r\n                onCommand(xtermCommandRef.current).then((data) => {\r\n                    terminal.writeln(data);\r\n                    writePrompt();\r\n                    xtermCommandRef.current = \"\";\r\n                });\r\n            }\r\n\r\n            // escape\r\n            if (key.key === \"\\x1B\") {\r\n                if (xtermCommandRef.current.length > 0) {\r\n                    for (let i = 0; i < xtermCommandRef.current.length; i++) {\r\n                        terminal.write('\\b \\b');\r\n                    }\r\n                    xtermCommandRef.current = \"\";\r\n                }\r\n                return;\r\n            }\r\n\r\n            //backspace\r\n            if (key.key === \"\\x7F\") {\r\n                if (xtermCommandRef.current.length > 0) {\r\n                    xtermCommandRef.current = xtermCommandRef.current.substr(0, xtermCommandRef.current.length - 1);\r\n                    terminal.write('\\b \\b');\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            xtermRef.current.terminal.write(key.key);\r\n            xtermCommandRef.current = xtermCommandRef.current + key.key;\r\n        });\r\n\r\n        writePrompt();\r\n\r\n        return () => termRefVar.terminal.dispose();\r\n    }, [xtermRef, processId, runspaceId, refetch]);\r\n\r\n    return (\r\n        <div className=\"height100\">\r\n            <XTerm\r\n                ref={xtermRef}\r\n                addons={[searchAddon, fitAddon, webLinksAddon]}\r\n                options={{\r\n                    //cols: 80,\r\n                    cursorBlink: true,\r\n                }}\r\n                className=\"height100\"\r\n            />\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default DebugTerminal;\r\n","import React from \"react\";\r\nimport { Breakpoint, DebugActionType } from \"../../types\";\r\nimport { useQuery } from \"react-query3\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Button, PageHeader, Result, Space, Tag, Tooltip } from \"antd\";\r\nimport { ArrowDownOutlined, ArrowRightOutlined, ArrowUpOutlined, PlayCircleOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\nimport DebugTerminal from \"./debugTerminal\";\r\n\r\nexport default function Debugger() {\r\n    const { processId, runspaceId } = useParams();\r\n    const [running, setRunning] = React.useState(false);\r\n    const { isLoading, refetch } = useQuery<Breakpoint>(\r\n        `/debugger/breakpoint/${processId}/${runspaceId}`, {\r\n        onSuccess: () => setRunning(false),\r\n        onError: () => setRunning(true)\r\n    });\r\n\r\n    const [disabled, setDisabled] = React.useState(false);\r\n\r\n    const SetDebugAction = async (type: DebugActionType, command?: string) => {\r\n        setDisabled(true);\r\n        var response = await axios({\r\n            method: \"PUT\",\r\n            url: `/api/v1/debugger/breakpoint/${processId}/${runspaceId}`,\r\n            data: {\r\n                type,\r\n                command\r\n            },\r\n        });\r\n\r\n        await refetch();\r\n        setDisabled(false);\r\n        return response.data;\r\n    }\r\n\r\n    return (\r\n        <PageHeader title=\"Debugger\" subTitle={`Debugging process ID ${processId} and runspace ID ${runspaceId}`} tags={(running || isLoading) && <Tag color=\"green\"><PlayCircleOutlined /> Running</Tag>}>\r\n\r\n            {(!running || isLoading) ? (\r\n                <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n                    <Space direction=\"horizontal\">\r\n                        <Tooltip title=\"Continue\">\r\n                            <Button disabled={disabled || isLoading || running} icon={<PlayCircleOutlined />} onClick={() => SetDebugAction(DebugActionType.Continue)} />\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Step Over\">\r\n                            <Button disabled={disabled || isLoading || running} icon={<ArrowRightOutlined />} onClick={() => SetDebugAction(DebugActionType.StepOver)} />\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Step Into\">\r\n                            <Button disabled={disabled || isLoading || running} icon={<ArrowDownOutlined />} onClick={() => SetDebugAction(DebugActionType.StepInto)} />\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Step Out\">\r\n                            <Button disabled={disabled || isLoading || running} icon={<ArrowUpOutlined />} onClick={() => SetDebugAction(DebugActionType.StepOut)} />\r\n                        </Tooltip>\r\n                    </Space>\r\n                    <DebugTerminal processId={processId} runspaceId={runspaceId} refetch={refetch} />\r\n                </Space>)\r\n                :\r\n                <Result title=\"Runspace is not stopped at a breakpoint\" subTitle=\"Runspace is currently running a script.\" />}\r\n\r\n        </PageHeader>\r\n    );\r\n}\r\n"],"sourceRoot":""}