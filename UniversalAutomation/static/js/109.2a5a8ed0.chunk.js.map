{"version":3,"sources":["components/terminal/terminal.tsx"],"names":["fitAddon","FitAddon","searchAddon","SearchAddon","webLinksAddon","WebLinksAddon","TerminalComponent","id","useParams","xtermRef","React","useRef","xtermCommandRef","nav","useNavigate","close","useMutation","axios","post","toRelativeUrl","onSuccess","data","queryClient","refetchQueries","stale","mutateAsync","connection","HubConnectionBuilder","withUrl","withAutomaticReconnect","configureLogging","LogLevel","Debug","build","onConnected","useCallback","ws","a","invoke","Number","parseInt","terminal","current","write","writePrompt","then","d","trimEnd","i","length","attachCustomKeyEventHandler","arg","code","type","ctrlKey","selection","getSelection","navigator","clipboard","writeText","readText","text","clear","onKey","key","toLocaleLowerCase","writeln","substr","useEffect","termRefVar","fit","start","catch","err","dispose","className","icon","danger","onClick","style","float","ref","addons","options","cursorBlink"],"mappings":"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","file":"static/js/109.2a5a8ed0.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { WebLinksAddon } from \"xterm-addon-web-links\";\r\nimport { FitAddon } from \"xterm-addon-fit\";\r\nimport { SearchAddon } from \"xterm-addon-search\";\r\nimport { XTerm } from \"xterm-for-react\";\r\nimport { HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { Button } from \"antd\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { useMutation } from \"react-query3\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport queryClient from \"components/utils/queryClient\";\r\nimport { toRelativeUrl } from \"components/utils/utils\";\r\n\r\nconst fitAddon = new FitAddon();\r\nconst searchAddon = new SearchAddon();\r\nconst webLinksAddon = new WebLinksAddon();\r\n\r\nconst TerminalComponent = () => {\r\n    const { id } = useParams();\r\n    const xtermRef = React.useRef<XTerm>(null);\r\n    const xtermCommandRef = React.useRef<string>(\"\");\r\n\r\n    const nav = useNavigate();\r\n\r\n    const { mutateAsync: close } = useMutation(\r\n        () =>\r\n            axios.post(toRelativeUrl(`/api/v1/terminal/instance/${id}`)),\r\n        {\r\n            onSuccess: (data) => {\r\n                queryClient.refetchQueries(`/terminal/instance`, { stale: true });\r\n                nav(toRelativeUrl(`/admin/automation/terminals`));\r\n            },\r\n        }\r\n    );\r\n\r\n    const connection = new HubConnectionBuilder()\r\n        .withUrl(toRelativeUrl(`/terminalhub`))\r\n        .withAutomaticReconnect()\r\n        .configureLogging(LogLevel.Debug)\r\n        .build();\r\n\r\n    const onConnected = React.useCallback(async (ws) => {\r\n        var data = await ws.invoke(\"connect\", Number.parseInt(id));\r\n        const terminal = xtermRef.current.terminal;\r\n        if (data !== \"success\") {\r\n            terminal.write(\"Failed to connect: \" + data);\r\n        }\r\n\r\n        const writePrompt = () => {\r\n            ws.invoke(\"invoke\", \"prompt\").then(data => {\r\n                let d = data.trimEnd() + ' ';\r\n                for (let i = 0; i < d.length; i++) {\r\n                    terminal.write('\\b \\b');\r\n                }\r\n\r\n                terminal.write(d);\r\n            });\r\n        }\r\n\r\n        terminal.attachCustomKeyEventHandler((arg) => {\r\n            if (arg.code === \"Home\" && arg.type === \"keydown\") {\r\n                return false;\r\n            }\r\n\r\n            if (arg.ctrlKey && arg.code === \"KeyC\" && arg.type === \"keydown\") {\r\n                const selection = terminal.getSelection();\r\n                if (selection) {\r\n                    navigator.clipboard.writeText(selection);\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (arg.ctrlKey && arg.code === \"KeyV\" && arg.type === \"keydown\") {\r\n                navigator.clipboard.readText()\r\n                    .then(text => {\r\n                        terminal.write(text);\r\n                    })\r\n            };\r\n            return true;\r\n        });\r\n\r\n        terminal.clear();\r\n        writePrompt();\r\n\r\n        xtermRef.current.terminal.onKey((key) => {\r\n            if (key.key === \"\\r\") {\r\n                if (xtermCommandRef.current.toLocaleLowerCase() === \"cls\" || xtermCommandRef.current.toLocaleLowerCase() === \"clear-host\") {\r\n                    terminal.clear();\r\n                    writePrompt();\r\n                    xtermCommandRef.current = \"\";\r\n                    return;\r\n                }\r\n\r\n                ws.invoke(\"invoke\", xtermCommandRef.current).then(data => {\r\n                    terminal.writeln(data);\r\n                    writePrompt();\r\n                    xtermCommandRef.current = \"\";\r\n                });\r\n            }\r\n\r\n            // escape\r\n            if (key.key === \"\\x1B\") {\r\n                if (xtermCommandRef.current.length > 0) {\r\n                    for (let i = 0; i < xtermCommandRef.current.length; i++) {\r\n                        terminal.write('\\b \\b');\r\n                    }\r\n                    xtermCommandRef.current = \"\";\r\n                }\r\n                return;\r\n            }\r\n\r\n            //backspace\r\n            if (key.key === \"\\x7F\") {\r\n                if (xtermCommandRef.current.length > 0) {\r\n                    xtermCommandRef.current = xtermCommandRef.current.substr(0, xtermCommandRef.current.length - 1);\r\n                    terminal.write('\\b \\b');\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            xtermRef.current.terminal.write(key.key);\r\n            xtermCommandRef.current = xtermCommandRef.current + key.key;\r\n        });\r\n    }, [xtermRef, id]);\r\n\r\n    useEffect(() => {\r\n        let termRefVar = xtermRef.current;\r\n        fitAddon.fit();\r\n\r\n        connection.start()\r\n            .then(() => {\r\n                onConnected(connection)\r\n            })\r\n            .catch((err) => {\r\n                xtermRef.current.terminal.write(err)\r\n            });\r\n\r\n        xtermRef.current.terminal.writeln(\r\n            \"Connecting...\"\r\n        );\r\n\r\n        return () => termRefVar.terminal.dispose();\r\n    }, [id, connection, onConnected]);\r\n\r\n    return (\r\n        <div className=\"height100\">\r\n            <Button icon={<DeleteOutlined />} danger onClick={() => close()} style={{ float: 'right' }}>Exit</Button>\r\n            <XTerm\r\n                ref={xtermRef}\r\n                addons={[searchAddon, fitAddon, webLinksAddon]}\r\n                options={{\r\n                    //cols: 80,\r\n                    cursorBlink: true,\r\n                }}\r\n                className=\"height100\"\r\n            />\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default TerminalComponent;\r\n"],"sourceRoot":""}