{"version":3,"sources":["components/translations/translation.tsx"],"names":["EditableCell","editing","dataIndex","title","children","inputType","record","index","restProps","Item","name","style","margin","rules","required","message","TranslationPage","langaugeId","useParams","useState","data","setData","count","setCount","updateDate","items","map","x","_key","key","useQuery","translation","isLoading","onSuccess","length","isStringLoading","refetch","Form","useForm","form","editingKey","setEditingKey","isEditing","cancel","handleDelete","a","newData","filter","item","axios","delete","languageId","handleAdd","value","dataArr","post","save","validateFields","row","findIndex","splice","push","put","console","log","mergedColumns","onFilter","startsWith","filterSearch","sorter","b","localeCompare","width","editable","render","_","Link","onClick","marginRight","icon","type","onConfirm","disabled","setFieldsValue","edit","col","onCell","subTitle","extra","url","component","direction","components","body","cell","dataSource","columns","rowClassName","loading","pagination","onChange"],"mappings":"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","file":"static/js/110.8e2dbb81.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Translation } from \"types\";\r\nimport { useQuery } from \"react-query3\";\r\nimport { Button, Form, Input, Popconfirm, Space, Tooltip, Typography, PageHeader, Table } from \"antd\";\r\nimport { DeleteOutlined, EditOutlined, SaveOutlined } from \"@ant-design/icons\";\r\nimport DocsButton from \"components/docsButton\";\r\nimport axios from \"axios\";\r\n\r\ninterface Item {\r\n    _key: string;\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\ninterface EditableCellProps extends React.HTMLAttributes<HTMLElement> {\r\n    editing: boolean;\r\n    dataIndex: string;\r\n    title: any;\r\n    inputType: 'number' | 'text';\r\n    record: Item;\r\n    index: number;\r\n    children: React.ReactNode;\r\n}\r\n\r\n\r\nconst EditableCell: React.FC<EditableCellProps> = ({\r\n    editing,\r\n    dataIndex,\r\n    title,\r\n    inputType,\r\n    record,\r\n    index,\r\n    children,\r\n    ...restProps\r\n}) => {\r\n    return (\r\n        <td {...restProps}>\r\n            {editing ? (\r\n                <Form.Item\r\n                    name={dataIndex}\r\n                    style={{ margin: 0 }}\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: `Please Input ${title}!`,\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n            ) : (\r\n                children\r\n            )}\r\n        </td>\r\n    );\r\n};\r\n\r\nexport default function TranslationPage() {\r\n    const { langaugeId } = useParams();\r\n    const [data, setData] = useState([]);\r\n    const [count, setCount] = useState(0);\r\n\r\n    const updateDate = (items: Item[]) => {\r\n        setData(items.map(x => {\r\n            return {\r\n                ...x,\r\n                _key: x.key\r\n            }\r\n        }))\r\n    };\r\n\r\n    const { data: translation, isLoading } = useQuery<Translation>(`/translation/${langaugeId}`);\r\n    const { isLoading: isStringLoading, refetch } = useQuery<Item[]>(`/translation/${langaugeId}/string`, {\r\n        onSuccess(data) {\r\n            updateDate(data);\r\n            setCount(data.length);\r\n            return data;\r\n        },\r\n    });\r\n\r\n    const [form] = Form.useForm();\r\n    const [editingKey, setEditingKey] = useState('');\r\n\r\n    const isEditing = (record: Item) => record._key === editingKey;\r\n\r\n    const edit = (record: Partial<Item> & { key: React.Key }) => {\r\n        form.setFieldsValue({ ...record });\r\n        setEditingKey(record._key);\r\n    };\r\n\r\n    const cancel = () => {\r\n        setEditingKey('');\r\n    };\r\n\r\n    const handleDelete = async (key: React.Key) => {\r\n        const newData = data.filter(item => item._key !== key);\r\n        updateDate(newData);\r\n        setCount(count - 1);\r\n\r\n        await axios.delete(`/api/v1/translation/${translation.languageId}/${key}`);\r\n        refetch();\r\n    };\r\n\r\n    const handleAdd = async () => {\r\n        const newData: Item = {\r\n            _key: `String${count + 1}`,\r\n            key: `String${count + 1}`,\r\n            value: ''\r\n        };\r\n\r\n        const dataArr = [...data, newData];\r\n\r\n        updateDate(dataArr);\r\n        setCount(count + 1);\r\n\r\n        await axios.post(`/api/v1/translation/${translation.languageId}`, newData);\r\n        refetch();\r\n    };\r\n\r\n    const save = async (key: React.Key) => {\r\n        try {\r\n            const row = (await form.validateFields()) as Item;\r\n\r\n            const newData = [...data];\r\n            const index = newData.findIndex(item => key === item._key);\r\n            if (index > -1) {\r\n                const item = newData[index];\r\n                newData.splice(index, 1, {\r\n                    ...item,\r\n                    ...row,\r\n                });\r\n                updateDate(newData);\r\n                setEditingKey('');\r\n            } else {\r\n                newData.push(row);\r\n                updateDate(newData);\r\n                setEditingKey('');\r\n            }\r\n\r\n            await axios.put(`/api/v1/translation/${translation.languageId}/${key}`, row);\r\n            refetch();\r\n        } catch (errInfo) {\r\n            console.log('Validate Failed:', errInfo);\r\n        }\r\n    };\r\n\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Key',\r\n            dataIndex: 'key',\r\n            key: 'key',\r\n            onFilter: (value, record) => record.key.startsWith(value),\r\n            filterSearch: true,\r\n            sorter: (a, b) => a.key.localeCompare(b.key),\r\n            width: '30%',\r\n            editable: true\r\n        },\r\n        {\r\n            title: 'Value',\r\n            dataIndex: 'value',\r\n            key: 'value',\r\n            onFilter: (value, record) => record.value.startsWith(value),\r\n            filterSearch: true,\r\n            sorter: (a, b) => a.value.localeCompare(b.value),\r\n            width: '30%',\r\n            editable: true,\r\n        },\r\n        {\r\n            dataIndex: 'operation',\r\n            render: (_: any, record: Item) => {\r\n                const editable = isEditing(record);\r\n                return editable ? (\r\n                    <span>\r\n                        <Typography.Link onClick={() => save(record.key)} style={{ marginRight: 8 }}>\r\n                            <Button icon={<SaveOutlined />} type=\"primary\">Save</Button>\r\n                        </Typography.Link>\r\n                        <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\r\n                            <Button>Cancel</Button>\r\n                        </Popconfirm>\r\n                    </span>\r\n                ) : (\r\n                    <span>\r\n\r\n                        <Typography.Link disabled={editingKey !== ''} onClick={() => edit(record)}>\r\n                            <Tooltip title=\"Edit\">\r\n                                <Button icon={<EditOutlined />} type=\"text\"></Button>\r\n                            </Tooltip>\r\n                        </Typography.Link>\r\n                        <Tooltip title=\"Delete\">\r\n                            <Popconfirm title=\"Sure to delete this item?\" onConfirm={() => handleDelete(record.key)}>\r\n                                <Button icon={<DeleteOutlined />} type=\"text\"></Button>\r\n                            </Popconfirm>\r\n                        </Tooltip>\r\n                    </span>\r\n\r\n                );\r\n            },\r\n        },\r\n    ]\r\n\r\n    const mergedColumns = columns.map(col => {\r\n        if (!col.editable) {\r\n            return col;\r\n        }\r\n        return {\r\n            ...col,\r\n            onCell: (record: Item) => ({\r\n                record,\r\n                inputType: 'text',\r\n                dataIndex: col.dataIndex,\r\n                title: col.title,\r\n                editing: isEditing(record),\r\n            }),\r\n        };\r\n    });\r\n\r\n    return (\r\n        <PageHeader title={translation?.languageId} subTitle={translation?.name} extra={[\r\n            <DocsButton url=\"platform/translation\" />\r\n        ]}>\r\n            <Form form={form} component={false}>\r\n                <Space direction=\"vertical\" style={{ width: '100%' }}>\r\n                    <Button onClick={handleAdd} type=\"primary\">\r\n                        Add String\r\n                    </Button>\r\n                    <Table\r\n                        components={{\r\n                            body: {\r\n                                cell: EditableCell,\r\n                            },\r\n                        }}\r\n                        dataSource={data}\r\n                        columns={mergedColumns}\r\n                        rowClassName=\"editable-row\"\r\n                        loading={isLoading || isStringLoading}\r\n                        pagination={{\r\n                            onChange: cancel,\r\n                        }}\r\n                    />\r\n                </Space>\r\n\r\n            </Form>\r\n        </PageHeader>\r\n    )\r\n}\r\n"],"sourceRoot":""}