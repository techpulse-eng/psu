{"version":3,"sources":["../node_modules/antd/es/auto-complete/index.js","components/ui/keySelect.tsx"],"names":["Option","Select","isSelectOptionOrSelectOptGroup","child","type","isSelectOption","isSelectOptGroup","AutoComplete","props","ref","customizeInput","customizePrefixCls","prefixCls","className","children","dataSource","childNodes","toArray","length","isValidElement","_childNodes","_slicedToArray","optionChildren","getInputElement","undefined","map","item","_typeof","React","key","value","optionValue","text","Error","devWarning","ConfigConsumer","_ref","getPrefixCls","_extends","omit","classNames","concat","mode","SECRET_COMBOBOX_MODE_DO_NOT_USE","RefAutoComplete","KeySelect","useQuery","data","isLoading","options","m","label","name"],"mappings":"yTAmBIA,EAASC,UAAOD,OAEpB,SAASE,EAA+BC,GACtC,OAAOA,GAASA,EAAMC,OAASD,EAAMC,KAAKC,gBAAkBF,EAAMC,KAAKE,kBAGzE,IAAIC,EAAe,SAAsBC,EAAOC,GAC9C,IAMIC,EANAC,EAAqBH,EAAMI,UAC3BC,EAAYL,EAAMK,UAClBC,EAAWN,EAAMM,SACjBC,EAAaP,EAAMO,WACnBC,EAAaC,YAAQH,GAIzB,GAA0B,IAAtBE,EAAWE,QAAgBC,YAAeH,EAAW,MAAQd,EAA+Bc,EAAW,IAAK,CAC9G,IAAII,EAAcC,YAAeL,EAAY,GAE7CN,EAAiBU,EAAY,GAG/B,IAIIE,EAJAC,EAAkBb,EAAiB,WACrC,OAAOA,QACLc,EAuCJ,OAlCEF,EADEN,EAAWE,QAAUhB,EAA+Bc,EAAW,IAChDF,EAEAC,EAAaA,EAAWU,KAAI,SAAUC,GACrD,GAAIP,YAAeO,GACjB,OAAOA,EAGT,OAAQC,YAAQD,IACd,IAAK,SACH,OAAoBE,gBAAoB5B,EAAQ,CAC9C6B,IAAKH,EACLI,MAAOJ,GACNA,GAEL,IAAK,SAED,IAAIK,EAAcL,EAAKI,MACvB,OAAoBF,gBAAoB5B,EAAQ,CAC9C6B,IAAKE,EACLD,MAAOC,GACNL,EAAKM,MAGZ,QACE,MAAM,IAAIC,MAAM,0EAEjB,GAIPL,aAAgB,WACdM,cAAa,eAAgB1B,GAAQ,eAAgB,6DACrD0B,aAAYxB,KAAoB,SAAUF,GAAQ,eAAgB,0FACjE,IACiBoB,gBAAoBO,IAAgB,MAAM,SAAUC,GACtE,IACIxB,GAAYyB,EADGD,EAAKC,cACK,SAAU1B,GACvC,OAAoBiB,gBAAoB3B,UAAQqC,YAAS,CACvD7B,IAAKA,GACJ8B,YAAK/B,EAAO,CAAC,eAAgB,CAC9BI,UAAWA,EACXC,UAAW2B,IAAW,GAAGC,OAAO7B,EAAW,kBAAmBC,GAC9D6B,KAAMzC,UAAO0C,gCAEbpB,gBAAiBA,IACfD,OAIJsB,EAA+BhB,aAAiBrB,GACpDqC,EAAgB5C,OAASA,EACV4C,Q,gBC9FA,SAASC,EAAUrC,GAAQ,IAAD,EACTsC,YAAgB,eAApCC,EAD6B,EAC7BA,KAAMC,EADuB,EACvBA,UACd,OACI,cAAC,EAAD,2BACQxC,GADR,IAEIyC,QAASD,EAAY,GAAKD,EAAKtB,KAAI,SAAAyB,GAAO,MAAO,CAAEC,MAAOD,EAAEE,KAAMtB,MAAOoB,EAAEE","file":"static/js/144.1ec4348f.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * TODO: 4.0\n *\n * - Remove `dataSource`\n * - `size` not work with customizeInput\n * - CustomizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport classNames from 'classnames';\nimport omit from \"rc-util/es/omit\";\nimport Select from '../select';\nimport { ConfigConsumer } from '../config-provider';\nimport devWarning from '../_util/devWarning';\nimport { isValidElement } from '../_util/reactNode';\nvar Option = Select.Option;\n\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\n\nvar AutoComplete = function AutoComplete(props, ref) {\n  var customizePrefixCls = props.prefixCls,\n      className = props.className,\n      children = props.children,\n      dataSource = props.dataSource;\n  var childNodes = toArray(children); // ============================= Input =============================\n\n  var customizeInput;\n\n  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    var _childNodes = _slicedToArray(childNodes, 1);\n\n    customizeInput = _childNodes[0];\n  }\n\n  var getInputElement = customizeInput ? function () {\n    return customizeInput;\n  } : undefined; // ============================ Options ============================\n\n  var optionChildren; // [Legacy] convert `children` or `dataSource` into option children\n\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(function (item) {\n      if (isValidElement(item)) {\n        return item;\n      }\n\n      switch (_typeof(item)) {\n        case 'string':\n          return /*#__PURE__*/React.createElement(Option, {\n            key: item,\n            value: item\n          }, item);\n\n        case 'object':\n          {\n            var optionValue = item.value;\n            return /*#__PURE__*/React.createElement(Option, {\n              key: optionValue,\n              value: optionValue\n            }, item.text);\n          }\n\n        default:\n          throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');\n      }\n    }) : [];\n  } // ============================ Warning ============================\n\n\n  React.useEffect(function () {\n    devWarning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.');\n    devWarning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.');\n  }, []);\n  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {\n    var getPrefixCls = _ref.getPrefixCls;\n    var prefixCls = getPrefixCls('select', customizePrefixCls);\n    return /*#__PURE__*/React.createElement(Select, _extends({\n      ref: ref\n    }, omit(props, ['dataSource']), {\n      prefixCls: prefixCls,\n      className: classNames(\"\".concat(prefixCls, \"-auto-complete\"), className),\n      mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE,\n      // Internal api\n      getInputElement: getInputElement\n    }), optionChildren);\n  });\n};\n\nvar RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete);\nRefAutoComplete.Option = Option;\nexport default RefAutoComplete;","import React from \"react\";\r\nimport { AutoComplete } from \"antd\";\r\nimport { useQuery } from \"react-query3\";\r\n\r\nexport default function KeySelect(props) {\r\n    const { data, isLoading } = useQuery<any[]>(\"/hotkey/key\");\r\n    return (\r\n        <AutoComplete\r\n            {...props}\r\n            options={isLoading ? [] : data.map(m => { return { label: m.name, value: m.name } })}\r\n        />\r\n    );\r\n}\r\n"],"sourceRoot":""}