{"version":3,"sources":["components/scripts/components/ScriptSchedules.tsx","components/ui/BuyLicenseAlertBox.tsx","components/ui/EditModal.tsx"],"names":["dayjs","extend","localizedFormat","columns","title","dataIndex","key","render","text","record","formatDate","nextExecution","credential","width","editable","schemaName","allowedWithOneWayGitSync","resource","ScriptSchedules","script","usePageContext","useQuery","select","data","filter","schedule","fullPath","enabled","refetchOnMount","refetchOnWindowFocus","schedules","isLoading","loading","BuyLicenseAlertBox","type","message","align","style","justifyContent","Link","href","target","EditModal","props","getButtonProps","useActionButton","normalizedRecord","useNormalizeData","useModalContext","onOk","form","licensed","useAppStore","requiredRoles","requiredAccessControls","AccessControlTypes","Edit","accessControls","action","onClickOk","resourceInfo","self","parent","name","inEditMode","preserve","defaultValues","Feature","Dashboard"],"mappings":"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","file":"static/js/36.6a16e8d5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { CustomColumns, Schedule } from \"../../../types\";\r\nimport { useQuery } from \"react-query3\";\r\nimport dayjs from \"dayjs\";\r\nimport Table from \"components/ui/Table\";\r\nimport localizedFormat from \"dayjs/plugin/localizedFormat\";\r\nimport { usePageContext } from \"components/pages/Page\";\r\nimport { formatDate } from \"components/utils/utils\";\r\nimport { Space } from \"antd\";\r\nimport DeleteButton from \"components/ui/DeleteButton\";\r\nimport EditModal from \"components/ui/EditModal\";\r\nimport { Modal } from \"components/ui/Modal\";\r\n\r\ndayjs.extend(localizedFormat);\r\n\r\nconst columns: CustomColumns<Schedule>[] = [\r\n  {\r\n    title: \"Description\",\r\n    dataIndex: \"description\",\r\n    key: \"description\",\r\n  },\r\n  {\r\n    title: \"Next Execution\",\r\n    key: \"nextExecution\",\r\n    render: (text, record: Schedule) => formatDate(record?.nextExecution),\r\n  },\r\n  {\r\n    title: \"Environment\",\r\n    key: \"environment\",\r\n    dataIndex: \"environment\",\r\n    render: (text) => (text ? text : \"Default\"),\r\n  },\r\n  {\r\n    key: \"runAs\",\r\n    title: \"Run As\",\r\n    render: (text, record) => record?.credential || \"Default\",\r\n  },\r\n  {\r\n    width: \"fit-content\",\r\n    dataIndex: \"actions\",\r\n    editable: false,\r\n    render: (text, record) => {\r\n      return (\r\n        <Space>\r\n          <Modal>\r\n            <EditModal record={record} schemaName=\"schedule\" allowedWithOneWayGitSync={false} />\r\n          </Modal>\r\n          <DeleteButton resource={record} allowedWithOneWayGitSync={false} />\r\n        </Space>\r\n      );\r\n    },\r\n  },\r\n];\r\n\r\nexport default function ScriptSchedules() {\r\n  const { resource: script } = usePageContext();\r\n  const { data: schedules, isLoading } = useQuery<Schedule[]>(\r\n    `/schedule`,\r\n    {\r\n      select: (data) => {\r\n        return data.filter(schedule => schedule?.script === script?.fullPath)\r\n      },\r\n      enabled: !!script,\r\n      refetchOnMount: false,\r\n      refetchOnWindowFocus: false,\r\n    }\r\n  );\r\n\r\n  return (\r\n    <Table\r\n      columns={columns}\r\n      data={schedules}\r\n      loading={isLoading}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Alert, Space, Typography } from \"antd\";\r\n\r\nexport default function BuyLicenseAlertBox() {\r\n  return (\r\n    <Alert\r\n      type=\"info\"\r\n      message={\r\n        <Space\r\n          align=\"center\"\r\n          style={{ width: \"100%\", justifyContent: \"space-between\" }}\r\n        >\r\n          Authentication requires a license.\r\n          <Typography.Link\r\n            href=\"https://ironmansoftware.com/powershell-universal/?rel=product\"\r\n            target=\"_blank\"\r\n          >\r\n            Buy License.\r\n          </Typography.Link>\r\n        </Space>\r\n      }\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { AccessControlTypes, Feature, PSUTypes, RoleGuardProps } from \"types\";\r\nimport { Button, ButtonProps } from \"antd\";\r\nimport { Form, FormContentBase } from \"./Form/Form\";\r\nimport { useActionButton } from \"components/utils/hooks/useActionButton\";\r\nimport { useModalContext, ModalOpenButton, ModalContent } from \"./Modal\";\r\nimport useNormalizeData from \"components/utils/normalizedRecord\";\r\nimport BuyLicenseAlertBox from \"./BuyLicenseAlertBox\";\r\nimport useAppStore from \"components/context/app/Hooks\";\r\n\r\n\r\ntype EditModalProps = {\r\n  action?: string;\r\n  record: PSUTypes;\r\n  schemaName?: string | undefined;\r\n  accessControl?: AccessControlTypes;\r\n  allowedWithOneWayGitSync: boolean;\r\n} & Omit<ButtonProps, \"resource\"> &\r\n  Omit<RoleGuardProps, \"children\">;\r\n\r\nexport default function EditModal({\r\n  record,\r\n  schemaName,\r\n  allowedWithOneWayGitSync,\r\n  ...props\r\n}: EditModalProps) {\r\n  const { getButtonProps } = useActionButton();\r\n  const normalizedRecord = useNormalizeData();\r\n  const { onOk, form } = useModalContext();\r\n  const { licensed } = useAppStore()\r\n\r\n  function handleOk() {\r\n\r\n    let key = record?.resourceInfo?.schemaName === \"tag\" ||\r\n      record?.resourceInfo?.schemaName === \"role\" ||\r\n      record?.resourceInfo?.schemaName === \"endpoint\" ||\r\n      record?.resourceInfo?.schemaName === \"ratelimit\" ||\r\n      record?.resourceInfo?.schemaName === \"dashboard\" ||\r\n      record?.resourceInfo?.schemaName === \"schedule\" ||\r\n      record?.resourceInfo?.schemaName === \"publishedfolder\"\r\n      ? record?.resourceInfo?.self\r\n      : record?.resourceInfo?.parent\r\n\r\n    if (record?.resourceInfo?.schemaName === \"page\") {\r\n      key = record?.resourceInfo?.self + \"?ignoreContent=true\"\r\n    }\r\n\r\n    onOk(key,\r\n      \"update\",\r\n      record\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ModalOpenButton requiredRoles={[\"Administrator\", \"Operator\"]} requiredAccessControls={AccessControlTypes.Edit} accessControls={props.accessControls} allowedWithOneWayGitSync={allowedWithOneWayGitSync}>\r\n        <Button\r\n          {...props}\r\n          {...getButtonProps({ action: \"edit\" })}\r\n          action=\"edit\"\r\n        />\r\n      </ModalOpenButton>\r\n      <ModalContent title=\"Edit Resource\" onClickOk={handleOk}>\r\n        <Form schemaName={schemaName || record?.resourceInfo?.schemaName}>\r\n          <FormContentBase\r\n            name=\"edit_form\"\r\n            form={form}\r\n            inEditMode={true}\r\n            preserve={false}\r\n            defaultValues={normalizedRecord(record)}\r\n          />\r\n        </Form>\r\n        {!licensed(Feature.Dashboard) && <BuyLicenseAlertBox />}\r\n      </ModalContent>\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}