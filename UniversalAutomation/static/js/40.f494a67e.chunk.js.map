{"version":3,"sources":["components/variables/SecretModal.tsx","components/variables/VariableModal.tsx","components/variables/UpdateSecretModal.tsx","components/variables/variables.tsx","components/ui/BuyLicenseAlertBox.tsx","components/ui/EditModal.tsx"],"names":["ImportSecretModal","useQuery","enabled","secrets","data","refetchSecret","refetch","variables","React","useState","selectedRowKeys","setSelectedRowKeys","selectedSecrets","setSelectedSecrets","onOk","useModalContext","a","i","length","secret","name","vault","type","useEffect","rowSelection","onChange","selectedRows","getCheckboxProps","record","disabled","some","variable","Modal","requiredRoles","requiredAccessControls","AccessControlTypes","Create","allowedWithOneWayGitSync","children","title","onClickOk","onCancel","component","Item","direction","size","Text","style","fontFamily","Table","columns","key","dataIndex","editable","queryFn","rowKey","NewVariableModal","buttonType","buttonText","buttonStyle","form","formName","Form","schemaName","preserve","props","queryClient","invalidateQueries","Edit","label","Variables","refetchOnWindowFocus","isLoading","setHidden","width","align","render","value","missingSecret","ExclamationCircleOutlined","color","setVariableTag","displayValue","toDisplayType","text","justifyContent","EditModal","hidden","DeleteButton","resource","subTitle","extra","url","actions","loading","BuyLicenseAlertBox","message","Link","href","target","getButtonProps","useActionButton","normalizedRecord","useNormalizeData","licensed","useAppStore","accessControls","action","resourceInfo","self","parent","inEditMode","defaultValues","Feature","Dashboard"],"mappings":"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","file":"static/js/40.f494a67e.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { Button, Form, Space, Typography } from \"antd\";\r\nimport { AccessControlTypes, CustomColumns, Variable } from \"types\";\r\nimport { useQuery } from \"react-query3\";\r\nimport {\r\n  ModalContent,\r\n  ModalOpenButton,\r\n  useModalContext,\r\n} from \"components/ui/Modal\";\r\nimport Table from \"components/ui/Table\";\r\n\r\nexport default function ImportSecretModal() {\r\n  const { data: secrets, refetch: refetchSecret } = useQuery<Variable[]>(\r\n    \"/variable/secret\",\r\n    {\r\n      enabled: false,\r\n    }\r\n  );\r\n\r\n  const { data: variables, refetch } = useQuery<Variable[]>(\"/variable\", {\r\n    enabled: false,\r\n  });\r\n  const [selectedRowKeys, setSelectedRowKeys] = React.useState<any[]>([]); // array to hold selected rows keys\r\n  const [selectedSecrets, setSelectedSecrets] = React.useState<Variable[]>(); // array to hold full selected rows\r\n\r\n  const { onOk } = useModalContext();\r\n\r\n  async function handleOk() {\r\n    for (var i = 0; i < selectedSecrets.length; i++) {\r\n      let secret = selectedSecrets[i];\r\n      await onOk(\"/variable\", \"create\", {\r\n        name: secret.name,\r\n        vault: secret.vault,\r\n        type: secret.type,\r\n      });\r\n    }\r\n    setSelectedRowKeys([]);\r\n    setSelectedSecrets([]);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    refetch();\r\n  }, [refetch]);\r\n\r\n  const columns: CustomColumns<Variable>[] = [\r\n    {\r\n      key: \"name\",\r\n      title: \"Name\",\r\n      dataIndex: \"name\",\r\n      editable: false,\r\n    },\r\n    {\r\n      key: \"vault\",\r\n      title: \"Vault\",\r\n      dataIndex: \"vault\",\r\n      editable: false,\r\n    },\r\n    {\r\n      key: \"type\",\r\n      title: \"Type\",\r\n      dataIndex: \"type\",\r\n      editable: false,\r\n    },\r\n  ];\r\n\r\n  // rowSelection object indicates the need for row selection\r\n  const rowSelection = {\r\n    selectedRowKeys: selectedRowKeys,\r\n    onChange: (selectedRowKeys: React.Key[], selectedRows: Variable[]) => {\r\n      setSelectedRowKeys(selectedRowKeys);\r\n      setSelectedSecrets(selectedRows);\r\n    },\r\n    getCheckboxProps: (record: Variable) => ({\r\n      disabled: variables?.some((variable) => variable.name === record.name), // Column configuration not to be checked\r\n      name: record.name,\r\n    }),\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <ModalOpenButton requiredRoles={[\"Administrator\", \"Operator\"]} requiredAccessControls={AccessControlTypes.Create} allowedWithOneWayGitSync={false}>\r\n        <Button children=\"Import Secret Variable\" />\r\n      </ModalOpenButton>\r\n      <ModalContent\r\n        title=\"Import Secret Variable\"\r\n        onClickOk={handleOk}\r\n        onCancel={() => {\r\n          setSelectedRowKeys([]);\r\n          setSelectedSecrets([]);\r\n        }}\r\n      >\r\n        <Form component={false}>\r\n          <Form.Item>\r\n            <Space direction=\"vertical\" size=\"small\">\r\n              <Typography.Text\r\n                style={{\r\n                  fontFamily: \"SFProDisplay-Semibold\",\r\n                }}\r\n              >\r\n                You can also import pre-existing secrets as variables into\r\n                Universal. The variable values are not imported but will be\r\n                looked up during execution.\r\n              </Typography.Text>\r\n            </Space>\r\n          </Form.Item>\r\n          <Table\r\n            data={secrets}\r\n            columns={columns}\r\n            queryFn={refetchSecret}\r\n            rowKey={(record: Variable) => record.name}\r\n            rowSelection={{ ...rowSelection }}\r\n          />\r\n        </Form>\r\n      </ModalContent>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport { AccessControlTypes, Variable } from \"../../types\";\r\nimport { Button } from \"antd\";\r\nimport {\r\n  ModalContent,\r\n  ModalOpenButton,\r\n  useModalContext,\r\n} from \"components/ui/Modal\";\r\nimport { Form, FormContentBase } from \"components/ui/Form/Form\";\r\n\r\nexport default function NewVariableModal({ buttonType = null, buttonText = \"Create New Variable\", buttonStyle = null }) {\r\n  const { onOk, form } = useModalContext();\r\n\r\n  function handleOk() {\r\n    onOk(\"/variable\", \"create\", {} as Variable);\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <ModalOpenButton requiredRoles={[\"Administrator\", \"Operator\"]} requiredAccessControls={AccessControlTypes.Create} allowedWithOneWayGitSync={false}>\r\n        <Button children={buttonText} type={buttonType} style={buttonStyle} />\r\n      </ModalOpenButton>\r\n      <ModalContent title=\"Create variable\" onClickOk={handleOk} formName=\"create_variable_form\">\r\n        <Form schemaName=\"variable\">\r\n          <FormContentBase\r\n            name=\"create_variable_form\"\r\n            form={form}\r\n            preserve={false}\r\n          />\r\n        </Form>\r\n      </ModalContent>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport { Button, Form, Input, Typography } from \"antd\";\r\nimport { AccessControlTypes } from \"types\";\r\nimport {\r\n    ModalContent,\r\n    ModalOpenButton,\r\n    useModalContext,\r\n} from \"components/ui/Modal\";\r\nimport queryClient from \"components/utils/queryClient\";\r\n\r\nexport default function ImportSecretModal(props) {\r\n    const { secret } = props;\r\n    const { onOk, form } = useModalContext();\r\n    async function handleOk() {\r\n        await onOk(\"/variable/secret\", \"update\", secret);\r\n        queryClient.invalidateQueries(\"/variable\");\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <ModalOpenButton requiredRoles={[\"Administrator\", \"Operator\"]} requiredAccessControls={AccessControlTypes.Edit} allowedWithOneWayGitSync={true}>\r\n                <Button children=\"Set Secret Value\" />\r\n            </ModalOpenButton>\r\n            <ModalContent\r\n                title=\"Set Secret Value\"\r\n                onClickOk={handleOk}\r\n            >\r\n                <Form component={false} form={form}>\r\n                    <Form.Item>\r\n                        <Typography>Setting the secret value will set the value in the vault.</Typography>\r\n                    </Form.Item>\r\n                    {secret.type === \"PSCredential\" && (\r\n                        <>\r\n                            <Form.Item label=\"Username\" name=\"username\">\r\n                                <Input />\r\n                            </Form.Item>\r\n                            <Form.Item label=\"Password\" name=\"password\">\r\n                                <Input type=\"password\" />\r\n                            </Form.Item>\r\n                        </>\r\n                    )}\r\n                    {secret.type !== \"PSCredential\" && (\r\n                        <Form.Item label=\"Value\" name=\"value\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    )}\r\n                </Form>\r\n            </ModalContent>\r\n        </Fragment>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { CustomColumns, Variable } from \"../../types\";\r\nimport { setVariableTag } from \"../utils/utils\";\r\nimport { useQuery } from \"react-query3\";\r\nimport { Modal } from \"components/ui/Modal\";\r\nimport { PageHeader, Space, Tooltip } from \"antd\";\r\nimport Table from \"../ui/Table\";\r\nimport EditModal from \"components/ui/EditModal\";\r\nimport SecretModal from \"./SecretModal\";\r\nimport DeleteButton from \"components/ui/DeleteButton\";\r\nimport NewVariableModal from \"./VariableModal\";\r\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\r\nimport UpdateSecretModal from './UpdateSecretModal'\r\nimport DocsButton from \"components/docsButton\";\r\n\r\nexport default function Variables() {\r\n  const { data: variables, isLoading, refetch } = useQuery<Variable[]>(\r\n    \"/variable\",\r\n    { enabled: false, refetchOnWindowFocus: false }\r\n  );\r\n\r\n  function setHidden(record: Variable) {\r\n    return record?.vault ? true : false\r\n  }\r\n\r\n  const toDisplayType = (type: string) => {\r\n    switch (type) {\r\n      case \"System.String\":\r\n        return \"String\";\r\n      case \"System.Boolean\":\r\n        return \"Boolean\";\r\n      case \"System.Int32\":\r\n        return \"Integer\";\r\n      case \"System.Object[]\":\r\n        return \"Array\";\r\n      default:\r\n        return type;\r\n    }\r\n  }\r\n\r\n  const columns: CustomColumns<Variable>[] = [\r\n    {\r\n      key: \"category\",\r\n      title: \"Category\",\r\n      editable: false,\r\n      width: \"min-content\",\r\n      align: \"left\",\r\n      render: (value, record) => {\r\n        if (record.missingSecret) {\r\n          return <Space>\r\n            <Tooltip title=\"This secret does not exist in the vault.\">\r\n              <ExclamationCircleOutlined style={{ color: \"red\" }} />\r\n            </Tooltip>\r\n            {setVariableTag(record)}\r\n          </Space>\r\n        }\r\n        return setVariableTag(record);\r\n      },\r\n    },\r\n    {\r\n      key: \"name\",\r\n      title: \"Name\",\r\n      dataIndex: \"name\",\r\n      editable: true,\r\n    },\r\n    {\r\n      title: \"Value\",\r\n      key: \"value\",\r\n      dataIndex: \"value\",\r\n      editable: true,\r\n      render: (value, record) => (record.vault ? \"********\" : record.displayValue),\r\n    },\r\n    {\r\n      key: \"type\",\r\n      title: \"Type\",\r\n      dataIndex: \"type\",\r\n      editable: false,\r\n      render: (value, record) => (record.type !== \"false\" ? toDisplayType(record.type) : \"-\"),\r\n    },\r\n    {\r\n      key: \"vault\",\r\n      title: \"Vault\",\r\n      dataIndex: \"vault\",\r\n      editable: false\r\n    },\r\n    {\r\n      key: \"description\",\r\n      title: \"Description\",\r\n      dataIndex: \"description\",\r\n      editable: true,\r\n    },\r\n    {\r\n      width: \"fit-content\",\r\n      dataIndex: \"actions\",\r\n      editable: false,\r\n      render: (text, record) => {\r\n        return (\r\n          <Space style={{ justifyContent: \"flex-end\", width: \"100%\" }}>\r\n            {record.vault && <Modal><UpdateSecretModal secret={record} /></Modal>}\r\n            <Modal>\r\n              <EditModal hidden={setHidden(record)} record={record} allowedWithOneWayGitSync={false} />\r\n            </Modal>\r\n            <DeleteButton resource={record} allowedWithOneWayGitSync={false} />\r\n          </Space>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <PageHeader title=\"Variables\" subTitle=\"Variables available throughout the PowerShell Universal platform.\" extra={[\r\n      <DocsButton url=\"platform/variables\" />\r\n    ]}>\r\n      <Table\r\n        title=\"Variables\"\r\n        actions={[\r\n          <Modal>\r\n            <NewVariableModal />\r\n          </Modal>,\r\n          <Modal>\r\n            <SecretModal />\r\n          </Modal>\r\n        ]}\r\n        columns={columns}\r\n        data={variables}\r\n        loading={isLoading}\r\n        queryFn={refetch}\r\n      />\r\n    </PageHeader>\r\n\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Alert, Space, Typography } from \"antd\";\r\n\r\nexport default function BuyLicenseAlertBox() {\r\n  return (\r\n    <Alert\r\n      type=\"info\"\r\n      message={\r\n        <Space\r\n          align=\"center\"\r\n          style={{ width: \"100%\", justifyContent: \"space-between\" }}\r\n        >\r\n          Authentication requires a license.\r\n          <Typography.Link\r\n            href=\"https://ironmansoftware.com/powershell-universal/?rel=product\"\r\n            target=\"_blank\"\r\n          >\r\n            Buy License.\r\n          </Typography.Link>\r\n        </Space>\r\n      }\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { AccessControlTypes, Feature, PSUTypes, RoleGuardProps } from \"types\";\r\nimport { Button, ButtonProps } from \"antd\";\r\nimport { Form, FormContentBase } from \"./Form/Form\";\r\nimport { useActionButton } from \"components/utils/hooks/useActionButton\";\r\nimport { useModalContext, ModalOpenButton, ModalContent } from \"./Modal\";\r\nimport useNormalizeData from \"components/utils/normalizedRecord\";\r\nimport BuyLicenseAlertBox from \"./BuyLicenseAlertBox\";\r\nimport useAppStore from \"components/context/app/Hooks\";\r\n\r\n\r\ntype EditModalProps = {\r\n  action?: string;\r\n  record: PSUTypes;\r\n  schemaName?: string | undefined;\r\n  accessControl?: AccessControlTypes;\r\n  allowedWithOneWayGitSync: boolean;\r\n} & Omit<ButtonProps, \"resource\"> &\r\n  Omit<RoleGuardProps, \"children\">;\r\n\r\nexport default function EditModal({\r\n  record,\r\n  schemaName,\r\n  allowedWithOneWayGitSync,\r\n  ...props\r\n}: EditModalProps) {\r\n  const { getButtonProps } = useActionButton();\r\n  const normalizedRecord = useNormalizeData();\r\n  const { onOk, form } = useModalContext();\r\n  const { licensed } = useAppStore()\r\n\r\n  function handleOk() {\r\n\r\n    let key = record?.resourceInfo?.schemaName === \"tag\" ||\r\n      record?.resourceInfo?.schemaName === \"role\" ||\r\n      record?.resourceInfo?.schemaName === \"endpoint\" ||\r\n      record?.resourceInfo?.schemaName === \"ratelimit\" ||\r\n      record?.resourceInfo?.schemaName === \"dashboard\" ||\r\n      record?.resourceInfo?.schemaName === \"schedule\" ||\r\n      record?.resourceInfo?.schemaName === \"publishedfolder\"\r\n      ? record?.resourceInfo?.self\r\n      : record?.resourceInfo?.parent\r\n\r\n    if (record?.resourceInfo?.schemaName === \"page\") {\r\n      key = record?.resourceInfo?.self + \"?ignoreContent=true\"\r\n    }\r\n\r\n    onOk(key,\r\n      \"update\",\r\n      record\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ModalOpenButton requiredRoles={[\"Administrator\", \"Operator\"]} requiredAccessControls={AccessControlTypes.Edit} accessControls={props.accessControls} allowedWithOneWayGitSync={allowedWithOneWayGitSync}>\r\n        <Button\r\n          {...props}\r\n          {...getButtonProps({ action: \"edit\" })}\r\n          action=\"edit\"\r\n        />\r\n      </ModalOpenButton>\r\n      <ModalContent title=\"Edit Resource\" onClickOk={handleOk}>\r\n        <Form schemaName={schemaName || record?.resourceInfo?.schemaName}>\r\n          <FormContentBase\r\n            name=\"edit_form\"\r\n            form={form}\r\n            inEditMode={true}\r\n            preserve={false}\r\n            defaultValues={normalizedRecord(record)}\r\n          />\r\n        </Form>\r\n        {!licensed(Feature.Dashboard) && <BuyLicenseAlertBox />}\r\n      </ModalContent>\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}