{"version":3,"sources":["components/ui/ResourceInfo.tsx","components/jobs/JobViews.tsx","components/jobs/job.tsx"],"names":["ResourceInfo","props","navigate","useNavigate","bordered","bodyStyle","padding","ghost","onBack","JobPipelineAsTree","lazy","JobErrorTable","JobParametersTable","JobViews","useState","current","setCurrent","views","pipeline","errors","parameters","headStyle","borderBottom","height","paddingTop","tabList","key","tab","activeTabKey","onTabChange","tabProps","type","tabBarStyle","tabBarExtraContent","Loader","tip","numeral","require","JobOutput","React","JobProgress","JobPage","id","useParams","showTimestamp","setShowTimestamp","refetchInterval","setRefetchInterval","relativeTime","setRelativeTime","data","useQuery","enabled","refetchOnWindowFocus","onSuccess","job","status","JobStatus","Running","Canceling","Queued","relativeSwitch","onChange","e","checked","checkedChildren","unCheckedChildren","downloadLog","icon","FileTextOutlined","onClick","window","open","Page","resource","title","subTitle","ViewScriptButton","tags","output","statusDescription","color","setStatusTag","extra","Modal","FeedbackModal","feedbackComplete","CancelJobButton","span","direction","size","generateJobDescription","JobDateTime","processId","BarsOutlined","Text","style","fontSize","memoryBytes","DashboardOutlined","format"],"mappings":"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","file":"static/js/53.5c6e58d8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, PageHeaderProps, PageHeader } from \"antd\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function ResourceInfo(props: PageHeaderProps & { children?: React.ReactNode }) {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <Card bordered={false} bodyStyle={{padding: 0}}>\r\n      <PageHeader {...props} ghost={true} onBack={() => navigate(-1)} />\r\n    </Card>\r\n  );\r\n}\r\n","import React, { lazy, useState } from \"react\";\r\nimport { Button, Card } from \"antd\";\r\nimport { RightPanelSizeButton } from \"components/pages/Page\";\r\nimport Loader from \"components/utils/Loader\";\r\n\r\nconst JobPipelineAsTree = lazy(() => import(\"./JobPipelineAsTree\"));\r\nconst JobErrorTable = lazy(() => import(\"./JobErrorTable\"));\r\nconst JobParametersTable = lazy(() => import(\"./JobParametersTable\"));\r\n\r\nexport default function JobViews() {\r\n  const [current, setCurrent] = useState(\"pipeline\")\r\n  const tabs = [\r\n    {\r\n      key: \"pipeline\",\r\n      tab: \"Pipeline\",\r\n    },\r\n    {\r\n      key: \"errors\",\r\n      tab: \"Errors\",\r\n    },\r\n    {\r\n      key: \"parameters\",\r\n      tab: \"Parameters\",\r\n    },\r\n  ];\r\n\r\n  const views = {\r\n    pipeline: <JobPipelineAsTree />,\r\n    errors: <JobErrorTable />,\r\n    parameters: <JobParametersTable />,\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      bordered={false}\r\n      headStyle={{ borderBottom: 0, height: 64 }}\r\n      bodyStyle={{ paddingTop: 24 }}\r\n      tabList={tabs}\r\n      activeTabKey={current}\r\n      onTabChange={(key) => setCurrent(key)}\r\n      tabProps={{\r\n        type: \"line\",\r\n        tabBarStyle: { height: 64 },\r\n      }}\r\n      tabBarExtraContent={\r\n        <RightPanelSizeButton>\r\n          <Button />\r\n        </RightPanelSizeButton>\r\n      }\r\n    >\r\n      <Loader tip={`Loading ${current}`}>{views[current]}</Loader>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Page, {\r\n  LeftPanel,\r\n  PageContentBase,\r\n  PageHeader,\r\n  RightPanel,\r\n} from \"components/pages/Page\";\r\nimport ResourceInfo from \"components/ui/ResourceInfo\";\r\nimport { useQuery } from \"react-query3\";\r\nimport { Job, JobStatus } from \"types\";\r\nimport { useParams } from \"react-router\";\r\nimport JobViews from \"./JobViews\";\r\nimport { Modal } from \"components/ui/Modal\";\r\nimport FeedbackModal from \"./components/FeedbackModal\";\r\nimport { generateJobDescription, setStatusTag } from \"components/utils/utils\";\r\nimport JobDateTime from \"./JobDateTime\";\r\nimport CancelJobButton from \"./components/CancelJobButton\";\r\nimport ViewScriptButton from \"./components/ViewScriptButton\";\r\nimport { Button, Col, Row, Space, Switch, Tooltip, Typography } from \"antd\";\r\nimport { BarsOutlined, DashboardOutlined, FileTextOutlined } from \"@ant-design/icons\";\r\nvar numeral = require('numeral');\r\n\r\nconst JobOutput = React.lazy(() => import(\"./output\"));\r\nconst JobProgress = React.lazy(() => import(\"./components/Progress\"));\r\n\r\nexport default function JobPage() {\r\n  const { id } = useParams();\r\n  const [showTimestamp, setShowTimestamp] = React.useState(true);\r\n  const [refetchInterval, setRefetchInterval] = React.useState<false | number>(1000)\r\n  const [relativeTime, setRelativeTime] = React.useState(true);\r\n\r\n  const { data } = useQuery<Job>(`/job/${id}`, {\r\n    enabled: !!id,\r\n    refetchOnWindowFocus: false,\r\n    refetchInterval,\r\n    onSuccess: (job) => {\r\n      if (job.status !== JobStatus.Running && job.status !== JobStatus.Canceling && job.status !== JobStatus.Queued) {\r\n        setRefetchInterval(false)\r\n      }\r\n    }\r\n  });\r\n\r\n  const relativeSwitch = <Switch onChange={e => setRelativeTime(e)} checked={relativeTime} checkedChildren={\"Relative Time\"} unCheckedChildren={\"Absolute Time\"} />\r\n  const downloadLog = <Button icon={<FileTextOutlined />} onClick={() => window.open(`/api/v1/job/${id}/logfile`)}>Log File</Button>\r\n\r\n  return (\r\n    <Page resource={data}>\r\n      <PageHeader>\r\n        <ResourceInfo\r\n          title={data?.id}\r\n          subTitle={<ViewScriptButton job={data} />}\r\n          tags={data?.status === 3 ? (\r\n            <Tooltip title={data?.output || data?.statusDescription} color=\"red\">\r\n              {setStatusTag(data?.status)}\r\n            </Tooltip>\r\n          ) : (\r\n            <Tooltip title={data?.output || data?.statusDescription}>\r\n              {setStatusTag(data?.status)}\r\n            </Tooltip>\r\n\r\n          )}\r\n          extra={\r\n            data?.status === 4\r\n              ? [\r\n                <Modal>\r\n                  <FeedbackModal job={data} feedbackComplete={() => setRefetchInterval(1000)} />\r\n                </Modal>,\r\n                <CancelJobButton job={data} />,\r\n                relativeSwitch,\r\n                downloadLog\r\n              ]\r\n              : [\r\n                <CancelJobButton job={data} />,\r\n                relativeSwitch,\r\n                downloadLog\r\n              ]\r\n          }\r\n        >\r\n          <Row>\r\n            <Col span={12}>\r\n              <Space direction=\"vertical\" size=\"small\">\r\n                {generateJobDescription(data)}\r\n                <JobDateTime job={data} relativeTime={relativeTime} />\r\n                <Space>\r\n                  {data?.processId !== 0 && <Tooltip title=\"Process ID\"><BarsOutlined /> <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>{data?.processId}</Typography.Text></Tooltip>}\r\n                  {data?.memoryBytes !== 0 && <Tooltip title=\"Average Memory Usage\"><DashboardOutlined /> <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>{numeral(data?.memoryBytes).format('0.00 b')}</Typography.Text></Tooltip>}\r\n                </Space>\r\n\r\n              </Space>\r\n            </Col>\r\n            <Col span={12}>\r\n              <JobProgress job={data} />\r\n            </Col>\r\n          </Row>\r\n\r\n        </ResourceInfo>\r\n      </PageHeader>\r\n      <PageContentBase>\r\n        <LeftPanel>\r\n          <JobOutput\r\n            job={data}\r\n            refetchInterval={refetchInterval}\r\n            showTimestamp={showTimestamp}\r\n            setShowTimestamp={() => setShowTimestamp(!showTimestamp)}\r\n          />\r\n        </LeftPanel>\r\n        <RightPanel>\r\n          <JobViews />\r\n        </RightPanel>\r\n      </PageContentBase>\r\n    </Page>\r\n  );\r\n}\r\n"],"sourceRoot":""}